We present a type-and-effect system that derives an exception-annotated type signature for any term in a simply typed non-strict functional language with general recursion and a list data type. This signature precisely (although not exactly) declares the set of exceptional values that may be present among the values of the term, using higher-ranked effect polymorphism and effect operators reminiscent of \SystemFw.

By restricting the use of higher-ranked polymorphism and operators to the effects and not extending their use to the types we conjecture the inference problem to remain decidable. We give a type inference algorithm that builds on the techniques developed by \citet{HoldermansHage}.

The types in \SystemFw form a simply typed \mbox{$\lambda$-calculus}. Similarly, the effects in our system form a simply typed $\lambda$-calculus embellished with the \ACIone-structure of sets ($\LambdaUnion$). We briefly study this language in its own right.
