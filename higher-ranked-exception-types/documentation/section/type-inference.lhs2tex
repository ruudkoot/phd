\section{Type inference}\label{section-type-inference-algorithm}

%format reconstruct                 = "\mathcal{R}"
%format complete                    = "\mathcal{C}"
%format instantiate                 = "\mathcal{I}"
%format match                       = "\mathcal{M}"

%format Product (a) (b)             = a "\times " b
%format ClassEnv                    = "\ClassEnv"
%format env                         = "\TyEnv"
%format kenv                        = "\KiEnv"

%format Var                         = "\TmVar"
%format env_x                       = "\TyEnv_x"

%format (Con (t) (c))               = c "_" t
%format ty                          = "\Ty"
%format Result (a) (b)              = "\langle" a "; " b "\rangle"
%format bottomTy                    = "\BottomTy{\Ty}"
%format ExnEmpty                    = "\ExnEmpty"

%format Crash                       = "\TmCrash{\Ty}{\ExnLbl}"
%format ExnCon                      = "\ExnCon{\ExnLbl}"

%format Abs                         = "\TmAbs{\TmVar}{\Ty}{\Tm}"
%format (Tuple  (x) (y))            = "\langle" x ";" y "\rangle"
%format (Triple (x) (y) (z))        = "\langle" x ";" y ";" z "\rangle"
%format ExnTy                       = "\ExnTy"
%format ExnTy'                      = "\ExnTy^\prime"
%format ExnTy''                     = "\ExnTy^{\prime\prime}"
%format ExnTy_0                     = "\ExnTy_0"
%format ExnTy_1                     = "\ExnTy_1"
%format ExnTy_2                     = "\ExnTy_2"
%format ExnTy_2'                    = "\ExnTy_2^\prime"
%format ExnTy_3                     = "\ExnTy_3"
%format ExnVar'                     = "\ExnVar^{\prime}"
%format ExnVar_1                    = "\ExnVar_1"
%format ExnVar_2'                   = "\ExnVar_2^\prime"
%format Exn                         = "\Exn"
%format Exn'                        = "\Exn^\prime"
%format Exn''                       = "\Exn^{\prime\prime}"
%format Exn_0                       = "\Exn_0"
%format Exn_1                       = "\Exn_1"
%format Exn_1'                      = "\Exn_1^\prime"
%format Exn_2                       = "\Exn_2"
%format Exn_2'                      = "\Exn_2^\prime"
%format Exn_3                       = "\Exn_3"
%format kenv'                       = "\overline{\ExnVar_i : \Kind_i}"
%format EmptyEnv                    = "\emptyset"
%format (extendTyEnv env x (t) e)   = env ", " x " : " t "\ \&\ " e
%format Tm                          = "\Tm"
%format tm                          = "\Tm"
%format tm_1
%format tm_2
%format tm_3
%format ExnTyBool                   = "\ExnBool"
%format ExnTyInt                    = "\ExnInt"
%format ExnTyArr (a) (b) (c) (d)    = "\ExnTyArr{" a "}{" b "}{" c "}{" d "}"
%format ExnForall (a) (b)           = "\ExnForall{" a "}{" b "}"

%format App                         = "\TmApp{\Tm_1}{\Tm_2}"
%format subst                       = "\theta"
%format Subst (x) (y)               = "\left[" x "\mapsto " y "\right]"
%format ExnUnion (a) (b)            = "\ExnUnion{" a "}{" b "}"
%format applySubst (x)              = "\theta " x
%format (simplify (kenv) (x))       = "\llfloor " x "\rrfloor_{" kenv "}"

%format Fix                         = "\TmFix{\Tm}"
%format Exn_i                       = "\Exn_i"
%format Exn_i1                      = "\Exn_{i+1}"
%format Exn_im                      = "\Exn_{i-1}"
%format Exn_w                       = "\Exn_\omega"
%format Exn_w'                      = "\Exn_\omega^\prime"
%format ExnTy_i                     = "\ExnTy_i"
%format ExnTy_i1                    = "\ExnTy_{i+1}"
%format ExnTy_im                    = "\ExnTy_{i-1}"
%format ExnTy_w                     = "\ExnTy_\omega"
%format ExnTy_w'                    = "\ExnTy_\omega^\prime"
%format bottomTyU                   = "\BottomTy{\lfloor \ExnTy^\prime \rfloor}"
%format until                       = "\mathbf{until}"
%format return                      = "\mathbf{return}"

%format BinOp                       = "\TmOp{\Tm_1}{\Tm_2}"
%format Seq                         = "\TmSeq{\Tm_1}{\Tm_2}"

%format If                          = "\TmIf{\Tm_1}{\Tm_2}{\Tm_3}"
%format ExnTyJoin a b               = "\TyJoin{" a "}{" b "}"

%format Nil                         = "\TmNil{\Ty}"
%format ExnTyList a (b)             = "\ExnTyList{" a "}{" b "}"

%format Cons                        = "\TmCons{\Tm_1}{\Tm_2}"
%format Case                        = "\TmCase{\Tm_1}{\Tm_2}{\TmVar_1}{\TmVar_2}{\Tm_3}"
%format Var_1
%format Var_2
\begin{figure}[h!]
\begin{code}
    reconstruct : Product ClassTyEnv (Product ClassKiEnv ClassTm) -> Product ClassExnTy ClassExn

    reconstruct env kenv Var         =  env_x

    reconstruct env kenv (Con ty c)  =  Result bottomTy ExnEmpty

    reconstruct env kenv Crash       =  Result bottomTy ExnCon

    reconstruct env kenv (Abs)       =
        let     Triple ExnTy_1 ExnVar_1 kenv'  =  complete EmptyEnv ty
                                             
                Tuple ExnTy_2 Exn_2            =  reconstruct ((extendTyEnv env Var ExnTy_1 ExnVar_1)) (kenv,kenv') Tm
        in      Result (ExnForall kenv' (ExnTyArr ExnTy_1 ExnVar_1 ExnTy_2 Exn_2)) ExnEmpty

    reconstruct env kenv (App)       =
        let     Tuple ExnTy_1 Exn_1                                    = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2                                    = reconstruct env kenv tm_2
                Tuple (ExnTyArr ExnTy_2' ExnVar_2' ExnTy' Exn') kenv'  = instantiate ExnTy_1
                subst                                                  = Subst ExnVar_2' Exn_2 . match EmptyEnv ExnTy_2 ExnTy_2'
        in      Tuple (simplify kenv (applySubst ExnTy')) (simplify kenv (ExnUnion (applySubst Exn') (Exn_1)))

    reconstruct env kenv (Fix) =
        let     Tuple ExnTy Exn                                      = reconstruct env kenv tm
                Tuple (ExnTyArr ExnTy' ExnVar' ExnTy'' Exn'') kenv'  = instantiate ExnTy
        in      Triple ExnTy_0 Exn_0 i  <- Triple bottomTyU ExnEmpty 0
                do  subst                     <- Subst ExnVar' Exn_i . match EmptyEnv ExnTy_i ExnTy'
                    Triple ExnTy_i1 Exn_i1 i  <- Triple  (simplify kenv (applySubst ExnTy'')) (simplify kenv (applySubst Exn'')) (i+1)
                until (Tuple ExnTy_i Exn_i) == Tuple ExnTy_im Exn_im
                return (Tuple ExnTy_i (simplify kenv (ExnUnion Exn Exn_i)))

    reconstruct env kenv (BinOp) =
        let     Tuple ExnTyInt Exn_1  = reconstruct env kenv tm_1
                Tuple ExnTyInt Exn_2  = reconstruct env kenv tm_2
        in      Tuple ExnTyBool (simplify kenv (ExnUnion Exn_1 Exn_2))

    reconstruct env kenv (Seq) =      
        let     Tuple ExnTy_1 Exn_1  = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2  = reconstruct env kenv tm_2
        in      Tuple ExnTy_2 (simplify kenv (ExnUnion Exn_1 Exn_2))

    reconstruct env kenv (If) =
        let     Tuple ExnTyBool Exn_1  = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2    = reconstruct env kenv tm_2
                Tuple ExnTy_3 Exn_3    = reconstruct env kenv tm_3
        in      Tuple (simplify kenv (ExnTyJoin ExnTy_2 ExnTy_3)) (simplify kenv (ExnUnion Exn_1 (ExnUnion Exn_2 Exn_3)))

    reconstruct env kenv Nil         =  Result (ExnTyList bottomTy ExnEmpty) ExnEmpty

    reconstruct env kenv (Cons) =  
        let     Tuple ExnTy_1 Exn_1                     = reconstruct env kenv tm_1
                Tuple (ExnTyList ExnTy_2 Exn_2') Exn_2  = reconstruct env kenv tm_2
        in      Tuple (simplify kenv (ExnTyList (ExnTyJoin ExnTy_1 ExnTy_2) (ExnUnion Exn_1 Exn_2'))) Exn_2

    reconstruct env kenv (Case) =     
        let     Tuple (ExnTyList ExnTy_1 Exn_1') Exn_1   = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2                    = reconstruct ((extendTyEnv (extendTyEnv env Var_1 ExnTy_1 Exn_1') Var_2 (ExnTyList ExnTy_1 Exn_1') Exn_1)) kenv tm_2
                Tuple ExnTy_3 Exn_3                    = reconstruct env kenv tm_3
        in      Tuple (simplify kenv (ExnTyJoin ExnTy_2 ExnTy_3)) (simplify kenv (ExnUnion Exn_1 (ExnUnion Exn_2 Exn_3)))
\end{code}
\caption{Type inference algorithm}
\end{figure}

\begin{itemize}

    \item In R-App and R-Fix: check that the fresh variables generated by |instantiate| are subsituted away by the substitution |subst| created by |match|. Also, we don't need those variables in the algorithm if we don't generate the elaborated term.

    \item In R-Fix we could get rid of the auxillary underlying type function if the fixpoint construct was replaced with a binding variant with an explicit type annotation.
    
    \item For R-Fix, make sure the way we handle fixpoints of exceptional value in a manner that is sound w.r.t. to the operational semantics we are going to give to this.

    \item Note that we do not construct the elaborated term, as it is not useful other than for metatheoretic purposes.
    
    \item Lemma: The algorithm maintains the invariant that exception types and exceptions are in normal form.

\end{itemize}

\subsection{Subtyping}

\begin{itemize}
    \item Is \CiteRule{S-Refl} an admissable/derivable rule, or should we drop \CiteRule{S-Bool} and \CiteRule{S-Int}?
\end{itemize}

\begin{figure}[h]
    \begin{gather*}
        \Rule{S-Refl}
             {}
             {\JudgeSubTy{\KiEnv}{\ExnTy}{\ExnTy}}
        \quad
        \Rule{S-Trans}
             {\JudgeSubTy{\KiEnv}{\ExnTy_1}{\ExnTy_2}
              \quad
              \JudgeSubTy{\KiEnv}{\ExnTy_2}{\ExnTy_3}
             }
             {\JudgeSubTy{\KiEnv}{\ExnTy_1}{\ExnTy_3}}
        \\[1.5ex]
        \Rule{S-Bool}
             {}
             {\JudgeSubTy{\KiEnv}{\ExnBool}{\ExnBool}}
        \quad
        \Rule{S-Int}
             {}
             {\JudgeSubTy{\KiEnv}{\ExnInt}{\ExnInt}}
        \\[1.5ex]
        \Rule{S-Arr}
             {\begin{gathered}
              \JudgeSubTy{\KiEnv}{\ExnTy_1^\prime}{\ExnTy_1}
                \quad
              \JudgeSubExn{\KiEnv}{\Exn_1^\prime}{\Exn_1}
                \\
              \JudgeSubTy{\KiEnv}{\ExnTy_2}{\ExnTy_2^\prime}
                \quad
              \JudgeSubExn{\KiEnv}{\Exn_2}{\Exn_2^\prime}
              \end{gathered}
             }
             {\JudgeSubTy{\KiEnv}
                         {\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}}
                         {\ExnTyArr{\ExnTy_1^\prime}{\Exn_1^\prime}{\ExnTy_2^\prime}{\Exn_2^\prime}}
             }
        \\[1.5ex]
        \Rule{S-List}
             {\JudgeSubTy{\KiEnv}{\ExnTy}{\ExnTy^\prime}
                \quad
              \JudgeSubExn{\KiEnv}{\Exn}{\Exn^\prime}
             }
             {\JudgeSubTy{\KiEnv}
                         {\ExnTyList{\ExnTy}{\Exn}}
                         {\ExnTyList{\ExnTy^\prime}{\Exn^\prime}}
             }
        \VER
        \Rule{S-Forall}
             {\JudgeSubTy{\KiEnv, \ExnVar : \Kind}{\ExnTy_1}{\ExnTy_2}}
             {\JudgeSubTy{\KiEnv}
                         {\ExnForall{\ExnVar : \Kind}{\ExnTy_1}}
                         {\ExnForall{\ExnVar : \Kind}{\ExnTy_2}}
             }
    \end{gather*}
\caption{Subtyping}
\end{figure}

\begin{itemize}

    \item Possibly useful lemma: $\ExnTy_1 = \ExnTy_2 \iff \ExnTy_1 \leq \ExnTy_2 \land \ExnTy_2 \leq \ExnTy_1$.

\end{itemize}
