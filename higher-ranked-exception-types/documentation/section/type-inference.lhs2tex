\section{Type inference}\label{section-type-inference-algorithm}

In this section we give an inference algorithm for the exception types presented in the previous section. (Term elaboration is omitted, but is straightforward to implement.)

%include ../figure/type-inference-algorithm.lhs2tex

\subsection{Polymorphic abstraction}
The cases for abstraction and application are handled similarly to the corresponding cases in \citet{HoldermansHage}.

In the case of abstractions, we first complete the type of the bound variable to a most general exception type using the procedure |complete :: Product ClassKiEnv ClassTy -> Product ClassExnTy (Product ClassExn ClassKiEnv)|. This procedure is a functional interpretation of the type completion relation $\JudgeComplete{\KindENV}{\Ty}{\ExnTy}{\Exn}{\KindENV'}$, where the first two arguments $\KindENV$ and $\Ty$ are taken to be the domain and the last three arguments $\ExnTy$, $\Exn$ and $\KindENV'$ are taken to be the range. Next, we infer the exception type of the body of the abstraction under the assumption that the bound variable has the just completed exception type-and-effect $\ExnTy_1\ \&\ \ExnVar_1$. Finally we quantify over all free variables $\overline{\ExnVar_i :: \Kind_i}$ introduced by completion.

In the case of applications, we instantiate ($\mathcal{I}$) all quantified variables of the exception type of $t_1$ with fresh exception variables. Next we use the auxiliary procedure $\mathcal{M}$ to find a matching substitution between the exception types of the formal and the actual parameters.
%include ../figure/exception-type-matching.lhs2tex

The interesting cases of exception type matching are the cases for list and function types, where we perform pattern unification on the exception annotations. The produced substitution $\theta$ covers all variables $\overline{\ExnVar_i :: \Kind_i}$ freshly introduced by the instantiation procedure~$\mathcal{I}$. Finally, we apply the substitution $\theta$ to the exception type~$\ExnTy^\prime$ and effect~$\Exn^\prime$ of the result of $t_1$.

\subsection{Polymorphic recursion}

The $\mathbf{fix}$-construct abstracts over a variable that is of an exception polymorphic type. This case is handled by a Kleene--Mycroft iteration---which we conjecture to always converge.\footnote{\citet{HoldermansHage} note that $\lambda$-bound polymorpism gives us $\mathbf{fix}$-bound polymorphism ``for free.'' We believe this statement to be overly optimistic. While the highly polymorphic nature of these types do effectively force us to also handle polymorphic recursion, the inference step is arguably as complicated as the case for polymorphic abstraction.}

\begin{example}[Dussart, Henglein, Mossin]
    Consider the term
    \begin{code}
        f  ::  Bool -> Bool -> Bool
        f  =   FIX f' (Bool -> Bool -> Bool)
                    (LAMBDA (x :: Bool) (LAMBDA (y :: Bool) (if x then True else f' y x)))
    \end{code}

    Algorithm $\mathcal{R}$ infers the exception type (and elaborated term)
%    \begin{code}
%        dhm  ::  forall e_1:EXN. ExnTyArrS ExnTyBool e_1 (forall e_2:EXN. ExnTyArrT ExnTyBool e_2 ExnTyBool (e_1 # e_2) ExnEmpty) ExnEmpty
%        dhm  =   FIX (f) (forall e_1:EXN. ExnTyArrS ExnTyBool e_1 (forall e_2:EXN. ExnTyArrT ExnTyBool e_2 ExnTyBool (e_1 # e_2) ExnEmpty) ExnEmpty)
%                    (LLAMBDA (e_1 : EXN) (LAMBDA (x :: ExnTyBool :&: e_1) (LLAMBDA (e_2 : EXN) (PLAMBDA (y :: ExnTyBool :&: e_2))))
%                        if x then True else f (Angled e_2) y (Angled e_1) x
%    \end{code}    
    \begin{code}
        f  ::  forall e_1. ExnTyArrS ExnTyBool e_1 (forall e_2. ExnTyArrT ExnTyBool e_2 ExnTyBool (e_1 # e_2) ExnEmpty) ExnEmpty
        f  =   FIX (f') (forall e_1. ExnTyArrS ExnTyBool e_1 (forall e_2. ExnTyArrT ExnTyBool e_2 ExnTyBool (e_1 # e_2) ExnEmpty) ExnEmpty)
                    (LLAMBDA (e_1 : EXN) (LAMBDA (x :: ExnTyBool :&: e_1) (LLAMBDA (e_2 : EXN) (PLAMBDA (y :: ExnTyBool :&: e_2))))
                        if x then True else f' (Angled e_2) y (Angled e_1) x
    \end{code}
   
    First let's think about why the elaborated term is type-correct. 
    \begin{align*}
        x &: \ExnBool\ \&\ e_1 \\
        \TmTrue &: \ExnBool\ \&\ \emptyset \\
        f \langle e_2\rangle\ y\ \langle e_1\rangle\ x &: \ExnBool\ \&\ e_2 \cup e_1
    \end{align*}

    Therefore, \[ \TmIf{x}{\TmTrue}{f \langle e_2\rangle\ y\ \langle e_1\rangle\ x} : \ExnBool \sqcup \ExnBool\ \&\ e_1 \cup \emptyset \cup e_2 \cup e_1 \]
    
    By commutativity and idempotence of the union operator and the empty set being the unit, this reduces to:
    \[ \TmIf{x}{\TmTrue}{f \langle e_2\rangle\ y\ \langle e_1\rangle\ x} : \ExnBool\ \&\ e_1 \cup e_2 \]

    Of course, checking type-correctness is easier than type-inference. To infer the type of the fixed-point |f| we have to ``guess'' a type for it. How do we guess this type? We first try the least exception type $\bot_{\TyBool\to\TyBool\to\TyBool}$:
    \begin{code}
        forall e_1. ExnTyArrS ExnTyBool e_1 (forall e_2. ExnTyArrT ExnTyBool e_2 ExnTyBool (ExnEmpty) ExnEmpty) ExnEmpty
    \end{code}
    If we continue inferring the type with this guess, then we end up with a larger type than the guess:
    \begin{code}
        forall e_1. ExnTyArrS ExnTyBool e_1 (forall e_2. ExnTyArrT ExnTyBool e_2 ExnTyBool (e_1) ExnEmpty) ExnEmpty
    \end{code}
    We try inferring the type again, but now start with this type as our guess instead of the least type. We end up with an even larger type:
    \begin{code}
        forall e_1. ExnTyArrS ExnTyBool e_1 (forall e_2. ExnTyArrT ExnTyBool e_2 ExnTyBool (e_1 # e_2) ExnEmpty) ExnEmpty
    \end{code}
    Finally, if we take this type as our guess, we obtain the same type and conclude we have reached a fixed point.
\end{example}

\ThesisPaper{TODOX{Example: Glynn, Stuckey, Sulzman}}{}

\subsection{Least upper bounds}

The remaining cases of the algorithm are relatively straightforward. Several of the cases (\textbf{if-then-else}, \textbf{case-of} and the list-consing constructor) require the least upper bound of two exception types to be computed. The fact that exception annotations occurring in argument positions are always patterns makes this easy, as they must be equal up to $\alpha$-renaming of bound variables \cite{HoldermansHage}. This allows us to treat those arguments invariantly instead of contravariantly, obviating the need to also compute greatest lower bounds of types.

%format lub (a) (b) = a "\sqcup " b
%format |_| = "\sqcup "
\begin{figure}[ht]
    \begin{code}
        lub  ::  Product ClassExnTy ClassExnTy -> ClassExnTy
        ExnBool                                     |_|     ExnBool                                     = ExnBool
        ExnTyInt                                    |_|     ExnTyInt                                    = ExnTyInt
        ExnList ExnTy Exn                           |_|     ExnList ExnTy' Exn'                         = ExnList ((lub ExnTy ExnTy')) (ExnUnion Exn Exn')
        ExnTyArr ExnTy_1 e ExnTy_2 Exn              |_|     ExnTyArr ExnTy_1 e   ExnTy_2' Exn'          = ExnTyArr ExnTy_1 e ((lub ExnTy_2 ExnTy_2')) (Exn # Exn')
        (ExnForall (e : ki) ExnTy)                  |_|     (ExnForall (e : ki) ExnTy')                 = ExnForall (e : ki) (lub ExnTy ExnTy')
    \end{code}
    \caption{Exception types: least upper bounds ($\sqcup$)}
\end{figure}

\subsection{Complexity}
There are three aspects that affect the run-time complexity of the algorithm: the complexity of the underlying type system, reduction of the effects, and the fixpoint-iteration in the inference step of the $\mathbf{fix}$-construct.

We have a simply typed underlying type system, but if we would extend this to full Hindley--Milner, then it is possible for types to become exponentially larger than terms \cite{Mairson:1989:DMT:96709.96748,Kfoury:1990:MTD:101856.101870}. The effects are $\LambdaUnion$-terms, which contains the simply typed $\lambda$-calculus as a special case. Reduction of terms in the simply typed $\lambda$-calculus is non-elementary recursive \cite{stat79b}. It is also easy to find an artificial family of terms that requires at least a linear number of iterations to converge on a fixpoint. For these reasons we do not believe the algorithm to have an attractive theoretical bound on time-complexity.

Anecdotal evidence suggests that the practical time-complexity is acceptable, however. Hindley--Milner has almost linear complexity in non-pathological cases. Types do not grow larger than the terms. The same seems to hold for the effects. Reduction of effects takes a small number of steps, as does the convergence of the fixpoint-iteration.
