%include ../figure/declarative-exception-type-system.lhs2tex
%include ../figure/type-elaboration-system.lhs2tex

\clearpage\clearpage
\section{Exception types}\label{section-exception-types}

%\subsection{Exception types}

The syntax of well-formed exception types is given in Figure~\ref{fig-exception-type-syntax} and Figure~\ref{fig-exception-type-well-formed}. An exception type~$\ExnTy$ is formed out of base types (booleans and integers), compound types (lists), function types, and quantifiers (ranging over exception variables).\footnote{To avoid complicating the presentation we do \emph{not} allow quantification over type variables, i.e. polymorphism in the underlying type system.}

For a list with exception type $\ExnTyList{\ExnTy}{\Exn}$ and effect $\ExnAlt$, the type $\ExnTy$ of the elements in the list is \emph{annotated} with an exception set expression~$\Exn$ of kind~$\KindEXN$. This expression gives a set of exceptions, from which any one may be raised when an element of the list is forced. The effect $\ExnAlt$ gives a set of exceptions, from which any one may be raised when a constructor forming the spine of the list is forced.

For a function with exception type $\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}$ and effect~$\ExnAlt$, the argument of type $\ExnTy_1$ is annotated with an exception set expression $\Exn_1$ that gives set of exceptions that may be raised if the argument is forced in the body of the function. The result of type $\ExnTy_2$ is annotated with an exception set expression $\Exn_2$ that gives the set of exceptions that may be raised when the result of the function is forced. The effect $\ExnAlt$ gives the set of exceptions from which any one may be raised when the function closure is forced.

\begin{figure}[h!]
    \begin{alignat}{2}
        \Kind \in \ClassKind &\ ::=\ &&\KindEXN \tag{exception set} \\
                             &\quad||  &&\Kind_1 \KindArr \Kind_2 \tag{exception set operator}\\
        \notag\\
        \Exn, \ExnAlt \in \ClassExn  &\ ::=\ &&\ExnVar \tag{exception set variables} \\
                            &\quad||  &&\ExnAbs{\ExnVar}{\Kind}{\Exn} \tag{exception set abstraction}\\
                            &\quad||    &&\ExnApp{\Exn_1}{\Exn_2} \tag{exception set application}\\
                            &\quad||    &&\ExnEmpty \tag{empty exception set} \\
                            &\quad||    &&\ExnCon{\ExnLbl} \tag{singleton exception set} \\
                            &\quad||    &&\ExnUnion{\Exn_1}{\Exn_2} \tag{exception set union} \\
    \notag\\
        \ExnTy \in \ClassExnTy &\ ::=\ &&\ExnForall{\ExnVar :: \Kind}\ExnTy \tag{exception set quantification} \\
                     &\quad||  &&\ExnBool \tag{boolean type} \\
                     &\quad||  &&\ExnInt  \tag{integer type} \\
                     &\quad||  &&\ExnTyList{\ExnTy}{\Exn} \tag{list type} \\
                     &\quad||  &&\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2} \tag{function type}
    \end{alignat}
    \caption{Exception types: syntax}
    \label{fig-exception-type-syntax}
\end{figure}

Type signatures are denoted as $f : \ExnTy\ \&\ \Exn$, where $\ExnTy$ is the exception type of $f$ and $\Exn$ is the (top-most) effect.

%format bottom_E_fun = "\lightning^\mathbf{E}_{\TyBool \to \TyBool}"
\begin{example}
The identity function
    \begin{code}
    id  ::  forall e. ExnArr ExnBool e ExnBool e :&: EmptySet
    id  =   LAMBDA x x
    \end{code}
    propagates any exceptional value passed to it as an argument to the result unchanged. As the identity function is constructed by a literal $\lambda$-abstraction, no exception is raised when the resulting closure is forced, hence the empty effect.
\end{example}

\begin{example}
The exceptional function value
    \begin{code}
    bottom_E_fun ::  forall e. ExnArr ExnBool e ExnBool EmptySet :&: e_E
    \end{code}
    raises an exception when its closure is forced---as happens when it is applied to an argument, for example. As this function can never produce a result, it certainly cannot produce an exceptional value. So the result type is annotated with an empty exception set.
\end{example}

\begin{figure}[t]
    \begin{gather*}
        \Rule{W-Forall}
             {\JudgeExnTyWff{d}{\KiEnv,\ExnVar :: \Kind}{\ExnTy}}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyForall{\ExnVar}{\Kind}{\ExnTy}}}
        \VER
        \Rule{W-Bool}
             {}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnBool}}
        \HOR
        \Rule{W-Int}
             {}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnInt}}
        \VER
        \Rule{W-List}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTy} \quad \JudgeKind{\KiEnv}{\Exn}{\KindEXN}}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyList{\ExnTy}{\Exn}}}
        \VER
        \Rule{W-Arr}
             {\begin{gathered}\JudgeExnTyWff{d}{\KiEnv}{\ExnTy_1} \  \JudgeKind{\KiEnv}{\Exn_1}{\KindEXN} \  \JudgeExnTyWff{d}{\KiEnv}{\ExnTy_2} \  \JudgeKind{\KiEnv}{\Exn_2}{\KindEXN}\end{gathered}}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}}}
    \end{gather*}
    \caption{Exception types: well-formedness ($\JudgeExnTyWff{d}{\KiEnv}{\ExnTy}$)}
    \label{fig-exception-type-well-formed}
\end{figure}

The exception set expressions $\Exn$ and their kinds $\Kind$ are an instance of the \mbox{$\LambdaUnion$-calculus}, where exception set expressions are terms and kinds are the types. Two exception set expressions are considered equivalent if they are convertible as $\LambdaUnion$-terms, which is to say that they reduce to the same normal form.

The type system resembles \SystemFw \cite{Girard1972} in that we have quantification, abstraction and application at the type level. A key difference is that abstraction and application are restricted to the effects ($\ClassExn$) and cannot be used in the types ($\ClassExnTy$) directly.
Quantification on the other hand is resticted to the types, over effects, and not allowed in the effect itself. The types thus remain predicative.

\subsection{Subtyping}

Exception types are endowed with the usual subtyping relation for type-and-effect systems (Figure~\ref{figure-subtyping}). The function type is contravariant in its first argument for both the type and the effect. The subeffecting relation $\JudgeSubExn{\KiEnv}{\Exn_1}{\Exn_2}$ is the subsumption relation from the $\LambdaUnion$-calculus (Definition~\ref{definition-subsumption}).

%include ../figure/subtyping.lhs2tex

\subsection{Conservative types}

Any program that is typeable in the underlying type system should also have an exception type: the exception type system is a \emph{conservative extension} of the underlying type system. Like type systems for strictness or control flow analysis---and unlike type systems for information flow security or dimensional analysis---we do not want to reject any program that is well-typed in the underlying type system, but merely provide more insight into its behavior.

If we furthermore want the type system to be modular---allowing type checking and inference to work on individual modules instead of whole programs---we cannot and need not make any assumptions about the exception types of the arguments that are applied to any function, as the function may be called from outside the module with an argument that also comes from outside the module and which we cannot know anything about.

These observations lead to the following definition of \emph{conservative exception types}:\footnote{\citet{HoldermansHage} call pattern types \emph{fully parametric} and conservative types \emph{fully flexible}.}

\begin{definition}
An exception set expression $\Exn$ is \emph{simple} if it is a single exception set variable $\ExnVar$, an exception set expression is a \emph{pattern} if it fits Definition~\ref{definition-pattern}, and any is exception set expression is \emph{conservative}.

We lift these three judgments to exception types $\ExnTy$ in the following manner:

    \begin{itemize}
    
        \item If $\ExnTy = \ExnBool$ or $\ExnTy = \ExnInt$, then $\ExnTy$ is simple, a pattern and conservative.
        
        \item If $\ExnTy = [\Throws{\ExnTy^\prime}{\Exn}]$, then $\ExnTy$ is simple, a pattern or conservative if $\ExnTy^\prime$ and $\Exn$ are respectively simple, patterns  or conservative.
        
        \item If $\ExnTy = \forall \overline{\ExnVar_i :: \kappa_i}.\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}$, then $\ExnTy$ is both simple and a pattern if $\ExnTy_1$ and $\Exn_1$ are simple and $\ExnTy_2$ and $\Exn_2$ are patterns; and $\ExnTy$ is conservative if $\ExnTy_1$ and $\Exn_1$ are simple and $\ExnTy_2$ and $\Exn_2$ are conservative.
    
    \end{itemize}
\end{definition}

For base and compound types that stand in an argument position their effect and any nested annotations must thus be able to be instantiated to any arbitrary exception set expression. They must thus be exception set variables that have been universally quantified.

\begin{example} The function |tail| can be applied to any list, but may produce an additional exceptional value, because it is partial:
\begin{code}
    tail :: forall e_1 e_2. ExnArr (ExnList ExnBool e_1) e_2 (ExnList ExnBool e_1) (e_2 # ExnConE) :&: EmptySet
\end{code}
The type and effect of the argument are simple, while the type and effect of the result are conservative, making the whole type conservative.

%format conj (a) (b) = a "\land " b
The conjunction operator |&&| can be applied to any two booleans, and---being strict in both arguments---will propagate the exceptional values:
\begin{code}
    conj  :: forall e_1. ExnArr ExnBool e_1 ((forall e_2. ExnArr ExnBool e_2 ExnBool (e_1 # e_2))) EmptySet :&: EmptySet
\end{code}
Here both arguments have simple types and effects.
\end{example}

For function types that stand in an argument position (the functional parameters of a higher-order function) the situation is slightly more complicated. For the argument of this function we can inductively assume that this is a universally quantified exception set variable. The result of this function, however, is some exception set expression that depends on the exception set variables that were quantified over in the argument. We cannot simply introduce a new exception set variable here, but must introduce a Skolem function that depends on each of the universally quantified exception set variables.

\begin{example} Consider the higher-order function |apply| that applies its first argument to the second.
% apply : A e2:E. A e3:E=>E.
%           (A e1:E. bool<e1> --<e2>-> bool<e3 e2>) ->
%               A e4:E. bool<e4> -> bool<e2 + e3 e4>
\begin{code}
    apply  ::   forall e_2 : EXN. forall e_3 : EXN => EXN.
                  ExnArrA ((forall e_1 : EXN. ExnArr ExnBool e_1 ExnBool (e_3 e_1))) e_2
                    (ExnArrB ((forall e_4 : EXN. ExnArr ExnBool e_4 ExnBool (e_2 # e_3 e_4))) ExnEmpty)
           :&:  ExnEmpty
    apply  =  LAMBDA f (LAMBDA x (f x))
\end{code}

The first (functional) argument of |apply| has exception type |forall e_1 : EXN. ExnArr ExnBool e_1 ExnBool (e_3 e_1)| and effect |e_2|. It can be instantiated with any function that accepts an argument annotated with any exception set effect, and produces a result annotated with some exception set effect depending on the exception set effect of the argument; the function closure itself may raise any exception. All functions of underlying type |Bool -> Bool| satisfy these constraints, so they do not really constrain us in any way.

As |e_1| has been quantified over, only the exception set operator~|e_3| and the effect |e_2| are left free. We quantify over them outside the outer function space constructor, allowing them to appear in the annotation |e_2 # e_3 e_4| on the result. The exception set operator |e_3| is now applied to |e_4|, as the term-level application |f x| instantiates the quantified exception set variable |e_1| to |e_4|.

(Note that the exception annotation $e_2$ on the closure---unlike the exception set operator $e_3$ on the result---does not depend on the exception variable $e_1$, the annotation on the argument. As a closure is already a value, it being exceptional or not can never depend on the argument it is later applied to.)
\end{example}

%format CrashB2B = "\TmCrash{\TyBool\to\TyBool}{\ExnLblE}"
\begin{example}
    The semantics of the source language is not invariant under $\eta$-conversion in the presence of exceptional values---so neither are exception types. The term
    \savecolumns
    \begin{code}
        LAMBDA (x :: Bool) (CrashB2B x)  :: forall e : EXN. ExnTyArrT ExnBool e ExnBool ExnConE EmptySet
    \end{code}
    does not have the same exception type as the $\eta$-equivalent term
    \restorecolumns
    \begin{code}
        CrashB2B                         :: forall e : EXN. ExnTyArrT ExnBool e ExnBool EmptySet ExnConE
    \end{code}
    They cannot be distinguished by applying them to an argument
    \begin{code}
        (LAMBDA (x :: Bool) (CrashB2B x))  True  :: ExnBool :&: ExnConE
        CrashB2B                           True  :: ExnBool :&: ExnConE
    \end{code}
    but they can be by forcing the closure
    \begin{code}
        (LAMBDA (x :: Bool) (CrashB2B x))  seq  True  :: ExnBool :&: EmptySet
        CrashB2B                           seq  True  :: ExnBool :&: ExnConE
    \end{code}
\end{example}

\subsection{Exception type completion}

Given an underlying type $\Ty$ we can compute the most general exception type $\ExnTy$ that erases to $\Ty$. This is done using the type completion system in Figure~\ref{figure-type-completion}, defining a type completion relation $\JudgeComplete{\KindENV}{\Ty}{\ExnTy}{\Exn}{\KindENV'}$.
A judgment $\JudgeComplete{\KindEnv{i}}{\Ty}{\ExnTy}{\Exn}{\KindEnv{j}}$ is read: if the kinded exception set variables $\KindEnv{i}$ are in scope, then the underlying type $\Ty$ is completed to the exception type $\ExnTy$ and effect $\Exn$, while introducing the kinded free exception set variables $\KindEnv{j}$.
A completed exception type is always a pattern type.

\begin{example} The higher-order underlying type \[ \TyArr{\TyList{\TyArr{\TyBool}{\TyBool}}}{\TyArr{\TyList{\TyBool}}{\TyList{\TyBool}}} \] is completed to the pattern type
    \begin{align*}
        &    {\ExnTyForall{\ExnVar_2}{\KindEXN}{\ExnTyForall{\ExnVar_2^\prime}{\KindEXN}{\ExnTyForall{\ExnVar_3}{\KindEXN\KindArr\KindEXN}{}}}} \\
        & \quad \Throws{[\ExnTyForall{\ExnVar_1}{\KindEXN}{\Throws{\ExnBool}{\ExnVar_1}\xrightarrow{\ExnVar_2^\prime}\Throws{\ExnBool}{\ExnVar_3\ \ExnVar_1}}]}{\ExnVar_2} \to \\
        & \quad\quad (\ExnTyForall{\ExnVar_5}{\KindEXN}{\ExnTyForall{\ExnVar_5^\prime}{\KindEXN}{\Throws{[\Throws{\ExnBool}{\ExnVar_5^\prime}]}{\ExnVar_5}}} \xrightarrow{\ExnVar_6\ \ExnVar_2\ \ExnVar_2^\prime\ \ExnVar_3} \\
        & \quad\quad\quad\quad\quad\quad \Throws{\ExnTyList{\ExnBool}{\ExnVar_7^\prime\ \ExnVar_2\ \ExnVar_2^\prime\ \ExnVar_3\ \ExnVar_5\ \ExnVar_5^\prime}}{\ExnVar_7\ \ExnVar_2\ \ExnVar_2^\prime\ \ExnVar_3\ \ExnVar_5\ \ExnVar_5^\prime})
    \end{align*}
    with effect $\ExnVar_4$, and while introducing free variables
    \begin{align*}
        \ExnVar_4  &:: \KindEXN, \\
        \ExnVar_6 &:: \KindEXN\KindArr\KindEXN\KindArr(\KindEXN\KindArr\KindEXN)\KindArr\KindEXN, \\
        \ExnVar_7, \ExnVar_7^\prime &:: \KindEXN\KindArr\KindEXN\KindArr(\KindEXN\KindArr\KindEXN)\KindArr\KindEXN\KindArr\KindEXN\KindArr\KindEXN
    \end{align*}

Note that the types of both arguments are simple types with simple exception annotations. However, as the first argument is a functional argument, the result type of that function is still a pattern.

The exception annotation on the right-most function-space constructor is a pattern that depends on $\ExnVar_2$, $\ExnVar_2^\prime$ and $\ExnVar_3$. While we previously noted that the annotation on a function-space constructor cannot depend on the annotation belonging to the argument of that function, it is possible for set of exceptional values that the closure may come to depend on any previous arguments of the whole function. This is more concretely demonstrated by the following function:
%format fty = "\ExnTyForall{\ExnVar_1,\ExnVar_2}{\KindEXN}{\Throws{\ExnBool}{\ExnVar_1}\xrightarrow{\ExnEmpty}\Throws{\ExnBool}{\ExnVar_2}\xrightarrow{\ExnVar_1}\Throws{\ExnBool}{\ExnVar_2}}"
%format ftm = "\lambda x : \TyBool . x\ \mathbf{seq}\ \lambda y : \TyBool. y"
    \begin{code}
        f  :  fty
        f  =  ftm
    \end{code}
\end{example}
Whether the closure that is returned after partially applying |f| to one argument is an exceptional values or not, depends on that argument |x| being exceptional or not.

\subsection{Least exception types}

Given an effect kind $\overline{\kappa_i\Rightarrow}\KindEXN$, denote by $\emptyset_{\overline{\kappa_i\Rightarrow}\KindEXN}$ the effect $\lambda \overline{e_i :: \kappa_i}. \emptyset$.
Besides completing an underlying type $\Ty$ to a most general exception type, we also want to compute a least exception type~$\bot_\Ty$. This can be accomplished by first completing the type $\Ty$ to the most general exception type, and then substituting $\emptyset_{\kappa_j}$ for all free freshly introduced exception set variables $\KindEnv{j}$.

\begin{example} The least exception type \[ \bot_{\TyArr{\TyList{\TyArr{\TyBool}{\TyBool}}}{\TyArr{\TyList{\TyBool}}{\TyList{\TyBool}}}} \] is the conservative type
    \begin{align*}
        &    {\ExnTyForall{\ExnVar_2}{\KindEXN}{\ExnTyForall{\ExnVar_2^\prime}{\KindEXN}{\ExnTyForall{\ExnVar_3}{\KindEXN\KindArr\KindEXN}{}}}} \\
        & \quad \Throws{[\ExnTyForall{\ExnVar_1}{\KindEXN}{\Throws{\ExnBool}{\ExnVar_1}\xrightarrow{\ExnVar_2^\prime}\Throws{\ExnBool}{\ExnVar_3\ \ExnVar_1}}]}{\ExnVar_2} \to \\
        & \quad\quad (\ExnTyForall{\ExnVar_5}{\KindEXN}{\ExnTyForall{\ExnVar_5^\prime}{\KindEXN}{\Throws{[\Throws{\ExnBool}{\ExnVar_5^\prime}]}{\ExnVar_5}}} \xrightarrow{\ExnEmpty} \Throws{\ExnTyList{\ExnBool}{\ExnEmpty}}{\ExnEmpty})
    \end{align*}
\end{example}

\subsection{Exception typing and elaboration}

In Figure~\ref{figure-declarative-type-system} we give a declarative system for deriving exception typing judgments $\JudgeExnTy{\TyEnv}{\KiEnv}{\Tm}{\ExnTy}{\Exn}$.

These judgments work on an explicitly typed language and for this purpose we extend the terms of the source language with two new constructs: term-level effect abstraction and effect application.

\begin{figure}[h]
\paragraph{Terms}
\begin{alignat}{2}
\!  \Tm \in \ClassTm &\ ::=\   &&\ ...                            \notag       \\
                     &\quad||  &&\ \TmAbs{\TmVar}{\ExnTy\ \&\ \Exn}{\Tm} \tag{term abstraction} \\
                     &\quad||  &&\ \TmFixExn{\TmVar}{\ExnTy}{\Exn}{\Tm} \tag{fixpoint} \\
                     &\quad||  &&\ ...                            \notag       \\
                     &\quad||  &&\ \TmAnnAbs{\ExnVar}{\Kind}{\Tm} \tag{effect abstraction}  \\
                     &\quad||  &&\ \TmAnnApp{\Tm}{\Exn}           \tag{effect application}
\end{alignat}
\caption{Source language: extended syntax}\label{figure-source-language-syntax-extended}
\end{figure}

As the source language is not explicitly typed, we also give a type elaboration system that given an implicitly typed term in the source language produces an explicitly typed term (Figure~\ref{type-elaboration-system}).

The auxiliary judgment $\JudgeTyElab{\KiEnv}{\ExnTy}{\Ty}$ holds for any exception type $\ExnTy$ that erases to the underlying type $\Ty$. The type $\ExnTy_1 \sqcup \ExnTy_2$ is an exception type such that $\JudgeSubTy{\KiEnv}{\ExnTy_1}{\ExnTy_1 \sqcup \ExnTy_2}$ and $\JudgeSubTy{\KiEnv}{\ExnTy_2}{\ExnTy_1 \sqcup \ExnTy_2}$.

\subsection{Presentation of exception types}

For most-general conservative exception types the location of the quantifiers is uniquely determined, so we can omit them from the type without introducing ambiguity. For example, the exception type of the |map| function from the introduction can be presented as:
\begin{code}
(ThrowsArr (Throws alpha e_1) (Throws beta (e_2 e_1)) (e_3)) -> Throws ([Throws alpha e_4]) e_5 -> Throws ([Throws beta (e_2 e_4 # e_3)]) e_5
\end{code}

