\section{Completion}

\subsection{Exception types}

\begin{itemize}
    \item \TODO $\ExnVar \in \ClassExnVar$
    \item \TODO Well-formedness of exception types:
        \begin{enumerate}
            \item Kinding relatation (all annotation should be of kind $\KindEXN$.
            \item Conservative extension / full-flexibility.
        \end{enumerate}
\end{itemize}

The syntax of exception types are given in Figure~\ref{fig-exception-type-syntax}. An exception type~$\ExnTy$ is formed out of base types (booleans), compound types (lists), function types and quantification over exception variables.\footnote{To avoid complicating the presentation would do \emph{not} allow quantification over type variables, i.e. polymorpism in the underlying type system.}

For a list with exception type $\ExnTyList{\ExnTy}{\Exn}$ the type of the elements in the lists $\ExnTy$ is \emph{annotated} with and exception set expression $\Exn$ of kind~$\KindEXN$. 

\begin{figure}[h]
    \begin{alignat}{2}
        \Kind \in \ClassKind &\ ::=\ &&\KindEXN \tag{exception set} \\
                             &\quad||  &&\Kind_1 \KindArr \Kind_2 \tag{exception operator}\\
        \notag\\
        \Exn \in \ClassExn &\ ::=\ &&\ExnVar \tag{exception variables} \\
                           &\quad||  &&\ExnAbs{\ExnVar}{\Kind}{\Exn} \tag{exception abstraction}\\
                            &\quad||    &&\ExnApp{\Exn_1}{\Exn_2} \tag{exception application}\\
                            &\quad||    &&\ExnEmpty \tag{empty exception set} \\
                            &\quad||    &&\ExnCon{\ExnLbl} \tag{singleton exception} \\
                            &\quad||    &&\ExnUnion{\Exn_1}{\Exn_2} \tag{exception set union} \\
    \notag\\
        \ExnTy \in \ClassExnTy &\ ::=\ &&\ExnForall{\ExnVar :: \Kind}\ExnTy \tag{exception quantification} \\
                     &\quad||  &&\ExnTyBool \tag{boolean type} \\
                     &\quad||  &&\ExnTyList{\ExnTy}{\Exn} \tag{list type} \\
                     &\quad||  &&\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2} \tag{function type}
    \end{alignat}
    \caption{Exception types: syntax}
    \label{fig-exception-type-syntax}
\end{figure}

\begin{figure}[h]
    \begin{gather*}
        \Rule{W-Univ}
             {\JudgeExnTyWff{d}{\KiEnv,\ExnVar :: \Kind}{\ExnTy}}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyForall{\ExnVar}{\Kind}{\ExnTy}}}
        \HOR
        \Rule{W-Bool}
             {}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyBool}}
        \VER
        \Rule{W-List}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTy} \quad \JudgeKind{\KiEnv}{\Exn}{\KindEXN}}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyList{\ExnTy}{\Exn}}}
        \VER
        \Rule{W-Arr}
             {}
             {\JudgeExnTyWff{d}{\KiEnv}{\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}}}
    \end{gather*}
    \caption{Exception types: well-formedness}
    \label{fig-exception-type-well-formed}
\end{figure}


\subsection{Exception type completion}

The completion procedure as a set of inference rules:

\begin{figure*}[h]
    \begin{gather*}
        \Rule{C-Bool}
             {}
             {\JudgeComplete{\KindEnv{i}}
                            {\TyBool}
                            {\ExnTyBool}
                            {\ExnVar\ \overline{\ExnVar_i}}
                            {\ExnVar :: \overline{\Kind_i\KindArr}\KindEXN}
             }
        \HOR
        \Rule{C-List}
             {\JudgeComplete{\KindEnv{i}}
                            {\Ty}
                            {\ExnTy}
                            {\Exn}
                            {\KindEnv{j}}
             }
             {\JudgeComplete{\KindEnv{i}}
                            {\TyList{\Ty}}
                            {\ExnTyList{\ExnTy}{\Exn}}
                            {\ExnVar\ \overline{\ExnVar_i}}
                            {\ExnVar :: \overline{\Kind_i\KindArr}%
                                \KindEXN, \KindEnv{j}}
             }
        \VER
        \Rule{C-Arr}
             {\JudgeComplete{}
                            {\Ty_1}
                            {\ExnTy_1}
                            {\Exn_1}
                            {\KindEnv{j}}
              \quad
              \JudgeComplete{\KindEnv{i},\KindEnv{j}}
                            {\Ty_2}
                            {\ExnTy_2}
                            {\Exn_2}
                            {\KindEnv{j}}
             }
             {\JudgeComplete{\KindEnv{i}}
                            {\TyArr{\Ty_1}{\Ty_2}}
                            {\ExnForall{\overline{\ExnVar_j :: \Kind_j}}\left(\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}\right)}
                            {\ExnVar\ \overline{\ExnVar_i}}
                            {\ExnVar :: \overline{\Kind_j\KindArr}%
                                \KindEXN, \KindEnv{k}}
             }
    \end{gather*}
    \caption{Type completion ($\JudgeComplete{\KindENV}{\Ty}{\ExnTy}{\Exn}{\KindENV'}$)}
\end{figure*}
