\section{Further research}\label{section-future-research}

%At least two opportunities for further research present itself:

\paragraph{Can we infer types for Kennedy's higher-ranked $\Lambda_{\delta\omega}$?} One problem that immediately presents itself is that this type system is not a conservative extension of the underlying type system: programs can be rejected because---while type correct in the underlying type system---the program may still be dimensionally inconsistent.
Unlike in this system, the annotations on function arguments will no longer be of the simple form (patterns) required for the straightforward matching step in our type inference algorithm. Instead we will likely have to solve a higher-order (equational) unification problem, which is only semi-decidable. \citet{Snyder:1990:HOE:648229.752474} and \citet{NipkowQian1991} do give us semi-algorithms for solving such problems (although, at least in the latter approach, the equational theory is assumed to be regular, which the theory of Abelian groups is not).
    
\paragraph{Can we further improve the precision of exception types?} In previous work \cite{Koot:2015:TEA:2678015.2682542} we argued that an accurate exception typing system for non-strict languages should also take the data flow of the program into account, as many exceptions that can be raised in non-strict languages are caused by incomplete pattern matches. The canonical example is the |risers| function---which splits a list into monotonically increasing subsegments; e.g., |risers [1, 3, 5, 1, 2] ---> [[1, 3, 5], [1, 2]]|---by \citet{Mitchell:2008:PBE:1411286.1411293}:
    
    \begin{code}
        risers  :: [Int] -> [[Int]]
        risers  []               =  []
        risers  [x]              =  [[x]]
        risers (x_1 : x_2 : xs)  =
            if x_1 <= x_2 then (x_1 : y) : ys else [x_1] : (y : ys)
                where (y : ys) = risers (x_2 : xs)
    \end{code}
The inference algorithm in Figure~\ref{figure-type-inference-algorithm} assigns |risers| the type
    % (∀e1::E.(∀e2::E.([int⟨e2⟩]⟨e1⟩→[[int⟨e2⟩]⟨∅⟩]⟨({risers}∪(e1∪e2))⟩))) & ∅    
    \begin{code}
        forall e_1 : EXN. forall e_2 : EXN.
            ExnTyArr (ExnTyList ExnTyInt e_2) e_1 (ExnList (ExnTyList ExnTyInt e_2) ExnEmpty) (e_1 # e_2 # ExnConE) :&: EmptySet
    \end{code}
where |ExnLblE| is the label of the exception raised when the pattern match in the |where|-clause fails.\footnote{This exception is left implicit in the above program, but becomes explicit when the code is desugared into our core language.} However, we pattern match on the result of the recursive call |risers (x_2 : xs)|. When |risers| is given a non-empty list (such as |x_2 : xs|) as an argument, it will always return a non-empty list as its result. The pattern match can thus never fail, and the exception labelled |ExnLblE| will thus never be raised.

In our previous work we demonstrated how this exception can be elided by having the exception flow depend on the data flow. The $\LambdaUnion$-calculus terms that form our effect annotations cannot express this dependence, however. In the earlier work we used a slightly ad hoc form of conditional constraints to model this dependence. We now believe extending a $\lambda$-calculus with an equational theory of Boolean rings may form the basis of a more principled approach. Booleans rings have already been successfully used to design type systems for strictness analysis \cite{Wright}, records \cite{LIX-RR-96-09} and exception tracking \cite{Benton:2007:SEA:1190315.1190320}.
