\subsection{Contributions}

This paper makes the following contributions:

\begin{itemize}

    \item A \emph{$\lambda$-calculus} extended with a union-operator that respect the associative, commutative, idempotent and unit structure of sets.

    \item A \emph{type-and-effect system} with higher-ranked effect-polymorphic types and effect operators that precisely tracks exceptions.
    
    \item An \emph{inference algorithm} for these higher-ranked exception types.

\end{itemize}

Some of the key insights used in the inference algorithm---in particular the facts that an underlying type can be completed to a most general exception type (Figure~\ref{figure-type-completion}), and that the form of the types encountered in the inference algorithm makes it both easy to unify two types (Figure~\ref{figure-matching}) and compute the least upper bound of two types (Figure~\ref{figure-lub})---were first noted by \citet{HoldermansHage}.
Our inference algorithm differs in a number of aspects. Notably, by the use of reduction of $\LambdaUnion$-terms instead of constraint solving and in the manner in which recursive definitions in the source language are handled by the algorithm.
