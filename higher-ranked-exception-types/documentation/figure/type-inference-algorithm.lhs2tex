%format RECONSTRUCT                 = "\mathcal{R}"
%format reconstruct (gam) (del) (tm)  = "\mathcal{R}(" gam "; " del "; " tm ")"
%format COMPLETE                    = "\mathcal{C}"
%format complete (env) (ty)         = "\mathcal{C}(" env "; " ty ")"
%format instantiate (ty)            = "\mathcal{I}(" ty ")"
%format MATCH                       = "\mathcal{M}"
%format match (env) (t1) (t2)       = "\mathcal{M}(" env "; " t1 "; " t2 ")"

%format ClassEnv                    = "\ClassEnv"
%format ClassTy                     = "\ClassTy"
%format env                         = "\TyEnv"
%format kenv                        = "\KiEnv"

%format Var                         = "\TmVar"
%format env_x                       = "\TyEnv(x)"

%format (ConX)                      = "c_\Ty"
%format ty                          = "\Ty"
%format Result (a) (b)              = a "\ \&\ " b
%format bottomTy                    = "\BottomTy{\Ty}"
%format ExnEmpty                    = "\ExnEmpty"

%format Crash                       = "\TmCrash{\Ty}{\ExnLbl}"
%format ExnCon                      = "\ExnCon{\ExnLbl}"

%format Abs                         = "\TmAbs{\TmVar}{\Ty}{\Tm}"
%format (Tuple  (x) (y))            = x "\ \&\ " y
%format (TupleI (x) (y))            = x "\triangleright " y
%format (TripleC (x) (y) (z))       = x "\ \&\ " y "\triangleright" z
%format (TripleX (x) (y) (z))       = x "; " y "\ \&\ " z
%format ExnTy                       = "\ExnTy"
%format ExnTy'                      = "\ExnTy^\prime"
%format ExnTy''                     = "\ExnTy^{\prime\prime}"
%format ExnTy_0                     = "\ExnTy_0"
%format ExnTy_1                     = "\ExnTy_1"
%format ExnTy_2                     = "\ExnTy_2"
%format ExnTy_2'                    = "\ExnTy_2^\prime"
%format ExnTy_3                     = "\ExnTy_3"
%format ExnVar'                     = "\ExnVar^{\prime}"
%format ExnVar_1                    = "\ExnVar_1"
%format ExnVar_2'                   = "\ExnVar_2^\prime"
%format Exn                         = "\Exn"
%format Exn'                        = "\Exn^\prime"
%format Exn''                       = "\Exn^{\prime\prime}"
%format Exn_0                       = "\Exn_0"
%format Exn_1                       = "\Exn_1"
%format Exn_1'                      = "\Exn_1^\prime"
%format Exn_2                       = "\Exn_2"
%format Exn_2'                      = "\Exn_2^\prime"
%format Exn_3                       = "\Exn_3"
%format kenv'                       = "\overline{\ExnVar_i :: \Kind_i}"
%format EmptyEnv                    = "\emptyset"
%format (extendTyEnv env x (t) e)   = env ", " x " : " t "\ \&\ " e
%format Tm                          = "\Tm"
%format tm                          = "\Tm"
%format tm_1
%format tm_2
%format tm_3
%format ExnTyBool                   = "\ExnBool"
%format ExnTyInt                    = "\ExnInt"
%format ExnTyArr (a) (b) (c) (d)    = "\ExnTyArr{" a "}{" b "}{" c "}{" d "}"
%format ExnForall (a) (b)           = "\ExnForall{" a "}{" b "}"

%format App                         = "\TmApp{\Tm_1}{\Tm_2}"
%format subst                       = "\theta"
%format Subst (x) (y)               = "\left[" x "\mapsto " y "\right]"
%format ExnUnion (a) (b)            = "\ExnUnion{" a "}{" b "}"
%format applySubst (x)              = "\theta " x
%format (simplify (kenv) (x))       = "\llfloor " x "\rrfloor_{" kenv "}"

%format Fix                         = "\TmFIX{\TmVar}{\Ty}{\Tm}"
%format Exn_i                       = "\Exn_i"
%format Exn_i1                      = "\Exn_{i+1}"
%format Exn_im                      = "\Exn_{i-1}"
%format Exn_w                       = "\Exn_\omega"
%format Exn_w'                      = "\Exn_\omega^\prime"
%format ExnTy_i                     = "\ExnTy_i"
%format ExnTy_i1                    = "\ExnTy_{i+1}"
%format ExnTy_im                    = "\ExnTy_{i-1}"
%format ExnTy_w                     = "\ExnTy_\omega"
%format ExnTy_w'                    = "\ExnTy_\omega^\prime"
%format bottomTyU                   = "\BottomTy{\Ty}"
%format until                       = "\mathbf{until}"
%format return                      = "\mathbf{return}"

%format BinOp                       = "\TmOp{\Tm_1}{\Tm_2}"
%format Seq                         = "\TmSeq{\Tm_1}{\Tm_2}"

%format If                          = "\TmIf{\Tm_1}{\Tm_2}{\Tm_3}"
%format ExnTyJoin a b               = "\TyJoin{" a "}{" b "}"

%format Nil                         = "\TmNil{\Ty}"
%format ExnTyList a (b)             = "\ExnTyList{" a "}{" b "}"

%format Cons                        = "\TmCons{\Tm_1}{\Tm_2}"
%format Case                        = "\TmCase{\Tm_1}{\Tm_2}{\TmVar_1}{\TmVar_2}{\Tm_3}"
%format Var_1
%format Var_2

%format repeat                      = "\mathbf{repeat}"
\begin{figure}[h]
\begin{code}
    RECONSTRUCT :: Product ClassTyEnv (Product ClassKiEnv ClassTm) -> Product ClassExnTy ClassExn

    reconstruct env kenv Var         =  env_x

    reconstruct env kenv (ConX)      =  Result bottomTy ExnEmpty

    reconstruct env kenv Crash       =  Result bottomTy ExnCon

    reconstruct env kenv Abs         =
        let     TripleC ExnTy_1 e kenv'        =  complete EmptyEnv ty
                                             
                Tuple ExnTy_2 Exn_2            =  reconstruct (extendTyEnv env Var ExnTy_1 e) (kenv,kenv') Tm
        in      Result (ExnForall kenv' (ExnTyArr ExnTy_1 e ExnTy_2 Exn_2)) ExnEmpty

    reconstruct env kenv (App)       =
        let     Tuple ExnTy_1 Exn_1                                     = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2                                     = reconstruct env kenv tm_2
                TupleI (ExnTyArr ExnTy_2' ExnVar_2' ExnTy' Exn') kenv'  = instantiate ExnTy_1
                subst                                                   = Subst ExnVar_2' Exn_2 . match EmptyEnv ExnTy_2' ExnTy_2
        in      Tuple (simplify kenv (applySubst ExnTy')) (simplify kenv (ExnUnion (applySubst Exn') (Exn_1)))

    reconstruct env kenv (Fix) =
        do      TripleX i ExnTy_0 Exn_0  <- TripleX 0 bottomTyU ExnEmpty
                repeat
                        (Tuple ExnTy_i1 Exn_i1)  <- reconstruct (env, x :: ExnTy_i & Exn_i) kenv tm
                        i                        <- i + 1
                until (Tuple ExnTy_i Exn_i) == Tuple ExnTy_im Exn_im
                return (Tuple ExnTy_i Exn_i)

    reconstruct env kenv (BinOp) =
        let     Tuple ExnTyInt Exn_1  = reconstruct env kenv tm_1
                Tuple ExnTyInt Exn_2  = reconstruct env kenv tm_2
        in      Tuple ExnTyBool (simplify kenv (ExnUnion Exn_1 Exn_2))

    reconstruct env kenv (Seq) =      
        let     Tuple ExnTy_1 Exn_1  = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2  = reconstruct env kenv tm_2
        in      Tuple ExnTy_2 (simplify kenv (ExnUnion Exn_1 Exn_2))

    reconstruct env kenv (If) =
        let     Tuple ExnTyBool Exn_1  = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2    = reconstruct env kenv tm_2
                Tuple ExnTy_3 Exn_3    = reconstruct env kenv tm_3
        in      Tuple (simplify kenv (ExnTyJoin ExnTy_2 ExnTy_3)) (simplify kenv (ExnUnion Exn_1 (ExnUnion Exn_2 Exn_3)))

    reconstruct env kenv Nil         =  Result (ExnTyList bottomTy ExnEmpty) ExnEmpty

    reconstruct env kenv (Cons) =  
        let     Tuple ExnTy_1 Exn_1                     = reconstruct env kenv tm_1
                Tuple (ExnTyList ExnTy_2 Exn_2') Exn_2  = reconstruct env kenv tm_2
        in      Tuple (simplify kenv (ExnTyList (ExnTyJoin ExnTy_1 ExnTy_2) (ExnUnion Exn_1 Exn_2'))) Exn_2

    reconstruct env kenv (Case) =     
        let     Tuple (ExnTyList ExnTy_1 Exn_1') Exn_1   = reconstruct env kenv tm_1
                Tuple ExnTy_2 Exn_2                    = reconstruct (extendTyEnv (extendTyEnv env Var_1 ExnTy_1 Exn_1') Var_2 (ExnTyList ExnTy_1 Exn_1') Exn_1) kenv tm_2
                Tuple ExnTy_3 Exn_3                    = reconstruct env kenv tm_3
        in      Tuple (simplify kenv (ExnTyJoin ExnTy_2 ExnTy_3)) (simplify kenv (ExnUnion Exn_1 (ExnUnion Exn_2 Exn_3)))
\end{code}
\caption{Type inference algorithm ($\mathcal{R}$)}\label{figure-type-inference-algorithm}
\end{figure}
