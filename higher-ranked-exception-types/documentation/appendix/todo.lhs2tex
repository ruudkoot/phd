\section{TODO}

\begin{itemize}

    \item naming and ordering of quantified exception set variables in the examples is inconsistent.
    
    \item notation of type signatures in the examples is inconsisten.

    \item standard polyrec examples (DHM + GSM)
    
    \item polyrec does not ``come for free''
    
    \item type inference: we have a fixpoint a la DHM
    
    \item widening
    
    \item ``algebraic'' effects?
    
    \item unexpected decidablity
    
    \item ack: Vincent + Femke; Andrew + Jeremy + Stephanie + Andres; ST-RC
    
    \item check wiki and folder for notes
    
    \item exception type of twice (and other h-o funs)
    
    \item no slanted-greek for lambda and Lambda
    
    \item typeset System $F_\omega$ correctly
    
    \item roll Metatheory into earlier sections, add new section Analysis (also add to Overview)
    
    \item Untracked exceptions can break information flow security.
    
    \item Elaborte in the subsection ``Contributions''. Mention prototype?
    
    \item : vs ::
    
    \item add function composition as an additional example

\end{itemize}

\subsection*{Abstract}

    \begin{itemize}

        \item title: Higher-order effect types
    
    \end{itemize}

\subsection{Introduction}

    \begin{itemize}
    
        \item In the final example (map (const undefined)) no non-exceptional values will be \emph{actually} present in the resulting list
    
        \item Why not |ThrowsArr (Throws alpha e_1) (Throws beta (e_2)) e_3|?! Give some examples why higher-rankedness is needed. The example on the poster/|map| isn't sufficient. Postpone to a later section?
        
        \item Need an example that clearly demonstrates why HRP is \emph{needed} (May be difficult without also constructing a complete subtyping-based analysis?)

    \end{itemize}
    
\subsection{The $\LambdaUnion$-calculus}

    \begin{itemize}
    
        \item \TODOX{We can make union only work on base types (as we not longer \emph{need} to distribute unions over applications)? Only need during widening, now...}

        \item \TODOX{Prove more Lemmas about reduction rules (esp. $\gamma_1$)}
        
        \item Add reduction rules for $\emptyset$ and idempotence to the Figure. (Do wee need the bars above the rules?)
    
        \item Prove semantics is ACI1. We have a different unit for each type!
        \item $\mathcal{P}(V_{\tau_1} \to V_{\tau_2}) \simeq V_{\tau_1} \to \mathcal{P}(V_{\tau_2})$? Cardinallity suggests not: $2^{(\beta^\alpha)} \neq (2^\beta)^\alpha$.
        \item If we don't distribute unions over applications, can we ever get them deep inside terms?
        \item If we don't \emph{and} the outermost lambdas are not there because is always of kind star, can we get non-trivial terms? I.e. something other than $e_1(e_{11},...,e_{1n_1}) \cup \cdots \cup e_k(e_{k1},...,e_{kn_k}$ (note: $e$ and not $t$ as arugments).
        
    \end{itemize}
    
    \subsubsection{Widening}

        \begin{itemize}
        
            \item Does this give us any bounds on the complexity? (Or do the fact that we have arguments prevent this?)
            
            \item Footnote about \emph{narrowing}.
            
            \item Note that this is the reason $\cup$ needs to be higher-order.
        
        \end{itemize}
    
\subsection{Source language}

    \begin{itemize}

        \item We either need to omit the type annotations on $\TmCrash{\Ty}{\ExnLbl}$, or add them to $\TmIf{}{}{}$ and $\TmCase{}{}{}{}{}$.
    
        \item We do not have a rule \CiteRule{E-AnnAppExn}. Check that the canonical forms lemma gives us that terms of universally quantified type cannot be exceptional values.
        
        \item Replace the arrow with another one? (This one clashes with the reduction relation from $\LambdaUnion$.)
        
        \item Define the meaning of the double brackets in the redecution rule E-Op.
        
        \item Let-bindings can be defined in terms of abstractions (because HRP)

    \end{itemize}
    
\subsection{Exception types}

    \begin{itemize}
    
        \item ``Type signatures are denoted as ...'' there are several other ways used to write this
        
        \item The syntax of environments is omitted from the ``syntax'' figure
        
        \item Merge the figures with syntax and well-formedness?
    
        \item Elaborate on well-formedness
        
        \item Prove that $\xleftrightarrow{*} \iff \simeq$.
    
        \item \TODOX{Rename stuff in \CiteRule{T-App} in the elaboration system (now subtype/-effect of the result instead of the argument and clashes with the indices enumerated over by $i$!}
        
        \item \TODOX{\CiteRule{T-AnnAbs}: $e \notin \mathrm{fv}(\Gamma)$}

        \item $\ExnVar \in \ClassExnVar$

        \item Well-formedness of exception types: embed conservativity / full-flexibility?

        \item Can we roll \textsc{Univ} and \textsc{Arr} into a single construct: $\ExnTyForall{\ExnVar}{\Kind}{\ExnTyArr{\ExnTy_1}{\ExnVar}{\ExnTy_2}{\Exn(\ExnVar)}}$? Still need to deal with the well-formedness of $\ExnTy_1$... Also may need to quantify over more than one variable simultaneously...

    \end{itemize}
    
\subsubsection{Subtyping}

    \begin{itemize}

        \item Is \CiteRule{S-Refl} an admissable/derivable rule, or should we drop \CiteRule{S-Bool} and \CiteRule{S-Int}?
        
        \item Possibly useful lemma: $\ExnTy_1 = \ExnTy_2 \iff \ExnTy_1 \leq \ExnTy_2 \land \ExnTy_2 \leq \ExnTy_1$.

    \end{itemize}

\subsubsection{Conservative types}

    \begin{itemize}

        \item \TODOX{Atomicity: |e_1 # e_2 -> ExnTyList e_1 e_2| is not useful, because no introspection}

        \item \TODO check all examples types against prototype

        \item \TODO properly typeset example types

        \item \TODO Skolemization and explicit existential quantification over unification variables?

    \end{itemize}
    
\subsubsection{Declarative type system}

    \begin{itemize}

        \item \TODOX{Exception type erasure relation}
        
        \item \TODOX{Least upper bounds (declaratively, as subtypes)}

    \end{itemize}

    \begin{itemize}
    
        \item In T-AnnAbs, $\Gamma, \xi = \Delta$?

        \item In T-Abs and T-AnnAbs, should the term-level term-abstraction also have an explicit effect annotation?

        \item In T-AnnAbs, might need a side condition stating that $\ExnVar$ is not free in $\KiEnv$.

        \item In T-App, note the double occurence of $\Exn$ when typing $\Tm_1$. Is subeffecting sufficient here? Also note that we do \emph{not} expect an exception variable in the left-hand side annotation of the function space constructor.
        
        \item In T-AnnApp, note the substitution. We need a substitution lemma for annotations.
        
        \item In T-Fix, the might be some universal quantifiers in our way. Do annotation applications in $\Tm$ take care of this, already? Perhaps we do need to change $\TmFix{\Tm}$ into a binding construct to resolve this? Also, there is some implicit subeffecting going on between the annotations and effect.
        
        \item In T-Case, note the use of explicit subeffecting. Can this be done using implicit subeffecting?
        
        \item For T-Sub, should we introduce a term-level coercion, as in Dussart--Henglein--Mossin? We now do shape-conformant subtyping, is subeffecting sufficient?
        
        \item Do we need additional kinding judgements in some of the rules? Can we merge the kinding judgement with the subtyping and/or -effecting judgement? Kind-preserving substitutions.
        
    \end{itemize}
    
\subsubsection{Type elaboration system}

    \begin{itemize}
    
        \item In \CiteRule{T-App} and {T-Fix}, note that there are substitutions in the premises of the rules. Are these inductive? (Probably, as these premises are not ``recursive'' ones.)

    \end{itemize}
    
\subsection{Type inference}

    \begin{itemize}

        \item Complexity: reduction corresponds to agressive constraint simplification

        \item alternative (faster?) version of Kleene-Mycroft

        \item In R-App and R-Fix: check that the fresh variables generated by |instantiate| are subsituted away by the substitution |subst| created by |match|. Also, we don't need those variables in the algorithm if we don't generate the elaborated term.

        \item In R-Fix we could get rid of the auxillary underlying type function if the fixpoint construct was replaced with a binding variant with an explicit type annotation.
        
        \item For R-Fix, make sure the way we handle fixpoints of exceptional value in a manner that is sound w.r.t. to the operational semantics we are going to give to this.

        \item Note that we do not construct the elaborated term, as it is not useful other than for metatheoretic purposes.
        
        \item Lemma: The algorithm maintains the invariant that exception types and exceptions are in normal form. 
        
        \item Typesetting issues |simplify|

    \end{itemize}
    
\subsection{Related work}

    \begin{itemize}
    
        \item More differences between \cite{HoldermansHage} (e.g. data types)?
        
        \item Christian Mossin. ``Exact flow types'' (intersection types, also non-elementary recursive by Statman)
        
        \item algebraic lambda calculus: higher-order $\to$ second-order?
    
    \end{itemize}
    
\subsection{Future research}

    \begin{itemize}

        \item higher-ranked algebraic effect types, Koka
    
    \end{itemize}
