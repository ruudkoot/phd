\section{$\LambdaUnion$-calculus}

\paragraph{Values}

Values $\LuVal$ are terms of the form \[ \LuAbs{\LuVar_1}{\LuTy_1}{\cdots\LuAbs{\LuVar_i}{\LuTy_i}{\LuUnion{\LuCon[\LuCON_1]}{(
\LuUnion{\cdots}{(\LuUnion{\LuCon[\LuCON_j]}{(\LuUnion{\LuApp{\LuVar_1}{\LuVal_{11}\cdots\LuVal_{1m}}}{(\LuUnion{\cdots}{\LuApp{x_k}{v_{k1} \cdots v_{kn}}})})})})}}} \]

\subsection{Reduction relation (wrong!)}


\begin{itemize}

    \item \TODO\ Do not match the rules in the prototype (those are sensitive to the order in which they are tried).
    
    \item \TODO\ In the second rule only one term is applied; contrast this with the other rules involing applications.
    
    \item \TODO\ Should make use of the fact the everything is fully applied (and $\eta$-expanded/-long?): all atoms are of the form $k\ \overline{t_i}$, where $k$ is $c$ or $x$ and the number of arguments fixed by the arity of $k$. Then try to factor out the commutativity rules by taking ``sets'' of these atoms. That might simplify stuff a whole lot...
    
    \item \TODO\ Can we restrict the typing rule T-Union to only allow sets and not functions on both sides? This would remove the 2nd and 3rd rewrite rules and make the system a more traditional higher-order rewrite system: it's ``just'' higher-order pattern E-unification (decidable), boolean rings are easy to integrate, and higher-ranked dimension types becomes higher-order E-unification (semi-decidable). Open question: how to represent e.g. $U(e_2(e_1), e_1) = \left[e_2\mapsto \lambda e_1. e_1\right]$ without abstractions? (Reinterpret $e_1$ as $f(e_1)$ with $f = id$?)
    
\end{itemize}

\begin{definition}
    Let $\LuOrder{}{}$ be a strict total order on $\ClassLuCon \cup \ClassLuVar$, with $\LuOrder{\LuCON}{\LuVar}$ for all $\LuCON \in \ClassLuCon$ and $\LuVar \in \ClassLuVar$.
\end{definition}

\begin{align}
    {\LuApp{\left(\LuAbs{\LuVar}{\LuTy}{\LuTm_1}\right)}{\LuTm_2}} &\REDUCE {\Subst{\LuTm_2}{\LuVar}{\LuTm_1}} \tag{$\beta$-reduction} \\
    \begin{split}
    {\LuApp{\left(\LuUnion{\LuTm_1}{\LuTm_2}\right)}{\LuTm_3}} &\REDUCE {\LuUnion{\LuApp{\LuTm_1}{\LuTm_3}}{\LuApp{\LuTm_2}{\LuTm_3}}} \\
    {\LuUnion{\left(\LuAbs{\LuVar}{\LuTy}{\LuTm_1}\right)}{\left(\LuAbs{\LuVar}{\LuTy}{\LuTm_2}\right)}}
        &\REDUCE {\LuAbs{\LuVar}{\LuTy}{\left(\LuUnion{\LuTm_1}{\LuTm_2}\right)}} \\
    {\LuUnion{\LuAPPLIED}{\LuAPPLIED[']}}
        &\REDUCE {\LuVar\ \left(\LuUnion{\LuTm_1}{\LuTm_1'}\right) \cdots \left(\LuUnion{\LuTm_n}{\LuTm_n'}\right)}
    \end{split} \tag{congruences} \\
    {\LuUnion{\left(\LuUnion{\LuTm_1}{\LuTm_2}\right)}{\LuTm_3}}
        &\REDUCE {\LuUnion{\LuTm_1}{\left(\LuUnion{\LuTm_2}{\LuTm_3}\right)}} \tag{associativity} \\
    \begin{split}
    {\LuUnion{\LuEmpty}{\LuTm}} &\REDUCE {\LuTm} \\
    {\LuUnion{\LuTm}{\LuEmpty}} &\REDUCE {\LuTm}
    \end{split} \tag{unit} \\
    \begin{split}
    {\LuUnion{\LuVar}{\LuVar}} &\REDUCE {\LuVar} \\
    {\LuUnion{\LuVar}{\left(\LuUnion{\LuVar}{\LuTm}}\right)} &\REDUCE {\LuUnion{\LuVar}{\LuTm}} \\
    {\LuUnion{\LuCon}{\LuCon}} &\REDUCE {\LuCon} \\
    {\LuUnion{\LuCon}{\left(\LuUnion{\LuCon}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuCon}{\LuTm}}
    \end{split} \tag{idempotence} \\
    %\begin{split}
    {\LuUnion{\LuAPPLIED}{\LuCon}} &\REDUCE {\LuUnion{\LuCon}{\LuAPPLIED}} \\
    {\LuUnion{\LuAPPLIED}{\left(\LuUnion{\LuCon}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuCon}{\left(\LuUnion{\LuAPPLIED}{\LuTm}\right)}} \\
    {\LuUnion{\LuAPPLIED}{\LuAPPLIED[']}} &\REDUCE {\LuUnion{\LuAPPLIED[']}{\LuAPPLIED}} &&\text{if $\LuOrder{\LuVar'}{\LuVar}$}\quad\quad\quad\quad \\
    {\LuUnion{\LuAPPLIED}{\left(\LuUnion{\LuAPPLIED[']}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuAPPLIED[']}{\left(\LuUnion{\LuAPPLIED}{\LuTm}\right)}} &&\text{if $\LuOrder{\LuVar'}{\LuVar}$} \\
    {\LuUnion{\LuCon}{\LuCon[\LuCON']}} &\REDUCE {\LuUnion{\LuCon[\LuCON']}{\LuCon}} &&\text{if $\LuOrder{\LuCON'}{\LuCON}$} \\
    {\LuUnion{\LuCon}{\left(\LuUnion{\LuCon[\LuCON']}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuCon[\LuCON']}{\left(\LuUnion{\LuCon}{\LuTm}\right)}} &&\text{if $\LuOrder{\LuCON'}{\LuCON}$}
    %\end{split} \tag{commutativity}
\end{align}

\begin{conjecture}
    The reduction relation $\Reduce{}{}$ preserves meaning.
\end{conjecture}

\begin{conjecture}
    The reduction relation $\Reduce{}{}$ is strongly normalizing.
\end{conjecture}

\begin{conjecture}
    The reduction relation $\Reduce{}{}$ is locally confluent.
\end{conjecture}

\begin{corollary}
    The reduction relation $\Reduce{}{}$ is confluent.
\end{corollary}
\begin{proof}
    Follows from SN, LC and Newman's Lemma.
\end{proof}

\begin{corollary}
    The $\LambdaUnion$-calculus has unique normal forms.
\end{corollary}

\begin{corollary}
    Equality of $\LambdaUnion$-terms can be decided by normalization.
\end{corollary}

\subsection{Semantics}

\begin{itemize}
    \item \TODO Combine the lemma and the theorem and make the ``extensionally'' explicit.
    \item \TODO Is the case for applications rigorous? Relies on the monotonicity of $\varphi : V_{\tau_1} \to V_{\tau_2}$ (separate lemma, require in the denotational semantics?); this might fail for anything other than set union?
\end{itemize}

\begin{lemma}\label{lu-lem-app}
    $\llbracket \LuTm \rrbracket_{\rho\left[\LuVar \mapsto v_1\right]} \cup \llbracket \LuTm \rrbracket_{\rho\left[\LuVar \mapsto v_2\right]} \subseteq \llbracket \LuTm \rrbracket_{\rho\left[\LuVar \mapsto v_1 \cup v_2\right]}$ (extensionally).
\end{lemma}
\begin{proof}
    By induction on the term $\LuTm$.

    \Case{$\LuTm = \LuVar$} $\llbracket \LuVar \rrbracket_{\rho\left[\LuVar\mapsto v_1\right]} \cup \llbracket \LuVar \rrbracket_{\rho\left[\LuVar\mapsto v_2\right]} = \rho\!\left[\LuVar\mapsto v_1\right]\!(x) \cup \rho\!\left[\LuVar\mapsto v_2\right]\!(x) = v_1 \cup v_2 = \rho\!\left[x\mapsto v_1 \cup v_2\right]\!(x) = \llbracket \LuVar \rrbracket_{\rho\left[x\mapsto v_1 \cup v_2\right]}$.

    \Case{$\LuTm = y$ ($y \neq \LuVar$)} $\llbracket y \rrbracket_{\rho\left[\LuVar\mapsto v_1\right]} \cup \llbracket y \rrbracket_{\rho\left[\LuVar\mapsto v_2\right]} = \rho\!\left[\LuVar\mapsto v_1\right]\!(y) \cup \rho\!\left[\LuVar\mapsto v_2\right]\!(y) = \rho(y) \cup \rho(y) = \rho(y) = \rho\!\left[x\mapsto v_1 \cup v_2\right]\!(y) = \llbracket y \rrbracket_{\rho\left[x\mapsto v_1 \cup v_2\right]}$.

    \Case{$t=\LuApp{\LuTm_1}{\LuTm_2}$}
    \begin{align*}
        &\LuDenote{\LuApp{\LuTm_1}{\LuTm_2}}{v_1} \cup \LuDenote{\LuApp{\LuTm_1}{\LuTm_2}}{v_2} \\
        &= \bigcup\left\{\varphi(\LuDenote{\LuTm_2}{v_1})\mid\varphi\in\LuDenote{\LuTm_1}{v_1}\right\}\cup \bigcup\left\{\varphi(\LuDenote{\LuTm_2}{v_2})\mid\varphi\in\LuDenote{\LuTm_1}{v_2}\right\} \\
        &\textcolor{red}{\stackrel{!}{\subseteq}} \bigcup\left\{\varphi(\LuDenote{\LuTm_2}{v_1})\cup\varphi(\LuDenote{\LuTm_2}{v_2})\mid\varphi\in\LuDenote{\LuTm_1}{v_1}\cup\LuDenote{\LuTm_1}{v_2}\right\} \\
        &\textcolor{red}{\stackrel{!}{\subseteq}} \bigcup\left\{\varphi(\LuDenote{\LuTm_2}{v_1}\cup\LuDenote{\LuTm_2}{v_2})\mid\varphi\in\LuDenote{\LuTm_1}{v_1}\cup\LuDenote{\LuTm_1}{v_2}\right\} \\
        & \IH{\subseteq} \bigcup\left\{\varphi(\LuDenote{\LuTm_2}{v_1 \cup v_2})\mid\varphi\in\LuDenote{\LuTm_1}{v_1\cup v_2}\right\} \\
        &= \LuDenote{\LuUnion{\LuTm_1}{\LuTm_2}}{v_1 \cup v_2}
    \end{align*}

    \Case{$t=\LuEmpty$} $\llbracket \LuEmpty \rrbracket_{\rho\left[\LuVar\mapsto v_1\right]} \cup \llbracket \LuEmpty \rrbracket_{\rho\left[\LuVar\mapsto v_2\right]} = \emptyset = \llbracket \LuEmpty \rrbracket_{\rho\left[\LuVar\mapsto v_1 \cup v_2\right]}$.

    \Case{$t=\LuCon$} $\llbracket \LuCon \rrbracket_{\rho\left[\LuVar\mapsto v_1\right]} \cup \llbracket \LuCon \rrbracket_{\rho\left[\LuVar\mapsto v_2\right]} = \LuCon = \llbracket \LuCon \rrbracket_{\rho\left[\LuVar\mapsto v_1 \cup v_2\right]}$.

    \Case{$t = \LuUnion{\LuTm_1}{\LuTm_2}$} $\llbracket \LuUnion{\LuTm_1}{\LuTm_2} \rrbracket_{\rho\left[\LuVar\mapsto v_1\right]} \llbracket \LuUnion{\LuTm_1}{\LuTm_2} \rrbracket_{\rho\left[\LuVar\mapsto v_2\right]} = \LuDenote{\LuTm_1}{v_1} \cup \LuDenote{\LuTm_1}{v_2} \cup \LuDenote{\LuTm_2}{v_1} \cup \LuDenote{\LuTm_2}{v_2} \IH{\subseteq} \LuDenote{\LuTm_1}{v_1 \cup v_2} \cup \LuDenote{\LuTm_2}{v_1 \cup v_2} = \LuDenote{\LuUnion{\LuTm_1}{\LuTm_2}}{v_1 \cup v_2}.$
\end{proof}

The inequality of Lemma~\ref{lu-lem-app} in not an equality.

\begin{counterexample}
Let $\mathrm{app} = \lambda f.\lambda x.f\ x$, then $\mathrm{app}\ (\lambda x.\emptyset)\ \{C\} \cup \mathrm{app}\ (\lambda x. x) \emptyset \leadsto \emptyset$, but $\mathrm{app}\ ((\lambda x.\emptyset) \cup (\lambda x. x))\ (\{C\} \cup \emptyset) \leadsto \{C\}$.
\end{counterexample}

\subsection{Normalization (with widening)}
\begin{itemize}
    \item \TODOX{We can make union only work on base types (as we not longer \emph{need} to distribute unions over applications)? Then the denotation of the function space would be simpler and might generalize to other structures..}
\end{itemize}

To reduce $\LambdaUnion$-terms to a normal form we combine the $\beta$-reduction rule of the simply typed $\lambda$-calculus with rewrite rules that deal with the associativity, commutativity, idempotence and identity (ACI1) properties of set-union operator.

If a term $t$ is $\eta$-long it can be written in the form
\begin{align*}
    t = \lambda x_1 \cdots x_n. \{ f_1(t_{11}, ..., t_{1q_1}), ..., f_p(t_{p1}, ..., t_{pq_p}) \}
\end{align*}
where $f_i$ can be a free or bound variable, a singleton-set constant, or another $\eta$-long term; and $q_i$ is equal to the arity of $f_i$ (for all $1 \leq i \leq p$). The notation $\{ f_1(t_{11}, ..., t_{1q_1}), ..., f_p(t_{p1}, ..., t_{pq_p}) \}$ is a shorthand for $f_1(t_{11}, ..., t_{1q_1}) \cup \cdots \cup f_p(t_{p1}, ..., t_{pq_p}) \}$, where we forget the associativity of the set-union operator and any empty-set constants. Note that despite the suggestive notation, this is not a true set, as there may still be duplicate elements $f_i(t_{i1}, ..., t_{iq_i})$.

A normal form $v$ of a term $t$ can be written as
\begin{align*}
    v = \lambda x_1 \cdots x_n. \{ k_1(v_{11}, ..., v_{1q_1}), ..., k_p(v_{p1}, ..., v_{pq_p}) \}
\end{align*}
where $k_i$ can be a free or bound variable, or a singleton-set constant, but not a term as this would form a $\beta$-redex.\footnote{Technically, terms that bind at least one variable would form a $\beta$-redex. Terms that do not bind any variables do not occur either as they merely form a subsequence of $k_1(v_{11}, ..., v_{1q_1}), ..., k_p(v_{p1}, ..., v_{pq_p})$ in this notation.} For each $k_i, k_j$ with $i < j$ we must also have that $k_i < k_j$ for some total order on $\ClassVar \cup \ClassCon$. Not only does this imply that each ter      m $k_i(v_{i1}, ..., v_{iq_i})$ occurs only once in $k_1(v_{11}, ..., v_{1q_1}), ..., k_p(v_{p1}, ..., v_{pq_p})$, but also the stronger condition that $k_i \neq k_j$ for all $i\neq j$.

%format reduce  (t)    = "\llfloor " t "\rrfloor "
%format reduce' (t)    = "\lfloor " t "\rfloor "
%format setRewrite (t) = "\Lbag " t "\Rbag "
%format ClassNf        = "\mathbf{Nf}"
%format x_1n           = " x_1 \cdots x_n"
%format y_1q           = " y_1 \cdots y_q"
%format atom           = "f_i(t_{i1}, ..., t_{iq_i})"
%format atomReduce     = "f_i(\llfloor t_{i1} \rrfloor, ..., \llfloor t_{iq_i} \rrfloor)"
%format atomStuck      = "k(v_{1}, ..., v_{q})"
%format unionize       = "\bigcup"
\begin{figure}[h]
\begin{code}
-- normalization of terms
reduce : ClassTm -> ClassNf
reduce (LAMBDA x_1n T) =
    LAMBDA x_1n (setRewrite ({ reduce' atomReduce | atom `elem` T }))

-- $\beta$-reduction
reduce' (atomStuck)
    = atomStuck
reduce' ((LAMBDA y_1q T)(v_1, ..., v_q))
    = SUBST x y z
    
-- set-rewriting
setRewrite ({ ..., k_i(...), ..., k_j(...), ...})
    | k_j < k_i = setRewrite ({ ..., k_i(...), ..., k_j(...), ...})
setRewrite ({ ..., k(...), k(...), ...})
    = setRewrite ({ ..., k(...), ...})
setRewrite T
    = T
\end{code}
\caption{Normalization algorithm for $\LambdaUnion$-terms.}
\end{figure}
