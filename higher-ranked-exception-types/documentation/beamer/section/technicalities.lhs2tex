\section{Technicalities}

\begin{frame}{Technicalities}

    \begin{itemize}
    
        \item Due to their syntactic weight, higher-ranked exception type only seem useful if they can be infered automatically.
    
        \item Unlike for HM type inference is undecidable in $F_\omega$.
        
        \item However, the exception types are annotations piggybacking on top of an underlying type system.
        
        \item Holdermans and Hage \cite{Holdermans:2010:PFA:1863543.1863554} showed type inference is decidable for a higher-ranked annotated type system with type operators performing control-flow analysis.
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities}

    \begin{enumerate}
    
        \item Perform Hindley--Milner type inference to reconstruct the underlying types.
        
        \item Run a second inference pass to reconstruct the exception types.
        
            \begin{enumerate}
            
                \item Collect a set of subtyping constraints.
                
                \item In case of a $\lambda$-abstraction $\lambda x : \tau. e$, we \emph{complete} the type $\tau$ to an exception type.
                
                \item In case of an application we \emph{match} the types of the formal and actual parameter.
            
            \end{enumerate}
            
        \item Solve the generated subtyping constraints.
    
    \end{enumerate}

\end{frame}

%format e_2p = "e_2^\prime"
%format gamma = "\widehat\Gamma"
%format chi   = "\chi"
%format chi_2
%format tauhat = "\widehat\tau"
%format tauhat_1
%format tauhat_1p = "\widehat\tau_1^\prime"
%format tauhat_2
%format tauhat_2prime = "\widehat\tau_2^\prime"
%format theta = "\theta"
%format C_1
%format C_2
%format t_1
%format t_2
%format Subst (k) (v) = "\left[" k " \mapsto " v "\right]"
%format MapsTo (k) (v) = k "\mapsto " v
%format KindEnv (i) = "\overline{e_{" i "} :: \kappa_{" i "}}"
%format EmptyEnv = "\emptyset"
%format EmptySet = "\emptyset"
%format Set (a) = "\{" a "\}"
%format Sub (a) (b) = a "\subseteq " b

\begin{frame}{Technicalities: Reconstruction (variables)}

    \begin{code}
        reconstruct gamma x =
            let  (tauhat, chi) = gamma(x)
                 e be fresh
            in   (tauhat, e, Set (Sub chi e))
    \end{code}

\end{frame}

%format UNTOUCHABLES  = "\{e_1\} \cup \{\overline{e_i}\} \cup fv\ \widehat\Gamma"
%format RESULTINGTYPE = "\forall e_1 :: \KindEXN.\overline{\forall e_i :: \kappa_i}.\ \widehat\tau_1^{e_1} \to \widehat\tau_2^{\chi_2}"

\begin{frame}{Technicalities: Reconstruction (abstractions)}

    \begin{code}
        reconstruct gamma (LAMBDA (x : tau) t) =
            let  (tauhat_1, KindEnv i)  = complete tau EmptyEnv
                 e_1 be fresh
                 (tauhat_2, e_2, C_1)   = reconstruct (gamma, MapsTo x ((tauhat_1, e_1))) t
                 X       = UNTOUCHABLES
                 chi_2   = solve C_1 X e_2
                 tauhat  = RESULTINGTYPE
                 e be fresh
            in   (tauhat, e, EmptySet)
    \end{code}

\end{frame}

\begin{frame}{Technicalities: Completion}

    \begin{itemize}
    
        \item The completion procedure adds as many quantifiers and type operators as possible to a type.
        
            \begin{figure}[h]
                \tiny
                \begin{gather*}
                \Rule{C-Bool}
                     {}
                     {\JudgeComplete{\KindEnv{i}}
                                    {\TyBool}
                                    {\ExnTyBool}
                                    {\ExnVar\ \overline{\ExnVar_i}}
                                    {\ExnVar :: \overline{\Kind_i\KindArr}\KindEXN}
                     }
                \\\\
                \Rule{C-List}
                     {\JudgeComplete{\KindEnv{i}}
                                    {\Ty}
                                    {\ExnTy}
                                    {\Exn}
                                    {\KindEnv{j}}
                     }
                     {\JudgeComplete{\KindEnv{i}}
                                    {\TyList{\Ty}}
                                    {\ExnTyList{\ExnTy}{\Exn}}
                                    {\ExnVar\ \overline{\ExnVar_i}}
                                    {\ExnVar :: \overline{\Kind_i\KindArr}%
                                        \KindEXN, \KindEnv{j}}
                     }
                \\\\
                \Rule{C-Arr}
                     {\JudgeComplete{}
                                    {\Ty_1}
                                    {\ExnTy_1}
                                    {\Exn_1}
                                    {\KindEnv{j}}
                      \quad
                      \JudgeComplete{\KindEnv{i},\KindEnv{j}}
                                    {\Ty_2}
                                    {\ExnTy_2}
                                    {\Exn_2}
                                    {\KindEnv{j}}
                     }
                     {\JudgeComplete{\KindEnv{i}}
                                    {\TyArr{\Ty_1}{\Ty_2}}
                                    {\ExnForall{\overline{\ExnVar_j :: \Kind_j}}\left(\ExnTyArr{\ExnTy_1}{\Exn_1}{\ExnTy_2}{\Exn_2}\right)}
                                    {\ExnVar\ \overline{\ExnVar_i}}
                                    {\ExnVar :: \overline{\Kind_j\KindArr}%
                                        \KindEXN, \KindEnv{k}}
                     }
            \end{gather*}
            \caption{Type completion ($\JudgeComplete{\KindENV}{\Ty}{\ExnTy}{\Exn}{\KindENV'}$)}
        \end{figure}    
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities: Completion}

    \begin{itemize}
    
        \item $\JudgeComplete{\cdot}{\TyBool}{\ExnTyBool}{e_1}{e_1 :: \KindEXN}$
        
        \pause
        
        \item $\JudgeComplete{e_1 :: \KindEXN}{\TyBool}{\ExnTyBool}{e_2\ e_1}{e_2 :: \KindEXN \Rightarrow \KindEXN}$
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities: Completion}

    \begin{itemize}
    
        \item $\TyBool\to\TyBool$
        \item $\forall e_1 :: \KindEXN.\ \ExnTyBool^{e_1} \to \ExnTyBool^{(e_2\ e_1)}\ \&\ e_3$
        \item $e_2 :: \KindEXN \Rightarrow \KindEXN, e_3 :: \KindEXN$
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities: Completion}

    \begin{itemize}
    
        \item $\TyBool\to\TyBool\to\TyBool$
        \item
            \begin{multline*}
                \forall e_1 :: \KindEXN.\ \ExnTyBool^{e_1} \to\\ (\forall e_4 :: \KindEXN.\ \ExnTyBool^{e_4} \xrightarrow{e_2\ e_1} \ExnTyBool^{(e_5\ e_1\ e_4)})\ \&\ e_3
            \end{multline*}
        \item $e_2 :: \KindEXN \Rightarrow \KindEXN, e_3 :: \KindEXN, e_5 :: \KindEXN \Rightarrow \KindEXN \Rightarrow \KindEXN$
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities: Completion}

    \begin{itemize}
    
        \item $(\TyBool\to\TyBool)\to\TyBool$
        \item
            \begin{multline*}
                \forall e_2 :: \KindEXN \Rightarrow \KindEXN.\ \forall e_3 :: \KindEXN.\\ \left(\forall e_1 :: \KindEXN.\ \ExnTyBool^{e_1} \xrightarrow{e_3} \ExnTyBool^{(e_2\ e_1)}\right) \to \ExnTyBool^{(e_4\ e_2\ e_3)}\ \&\ e_5
            \end{multline*}
        \item $e_4 :: (\KindEXN \Rightarrow \KindEXN) \Rightarrow \KindEXN \Rightarrow \KindEXN, e_5 :: \KindEXN$
    
    \end{itemize}

\end{frame}

%format INSTMATCH = "\widehat\tau_2^{\prime e_2^\prime} \to \widehat\tau^{\prime \chi^\prime}"

\begin{frame}{Technicalities: Reconstruction (applications)}

    \begin{code}
        reconstruct gamma (t_1 t_2) =
            let  (tauhat_1, e_1, C_1)  = reconstruct gamma t_1
                 (tauhat_2, e_2, C_2)  = reconstruct gamma t_2
                 INSTMATCH             = instantiate tauhat_1
                 theta = Subst e_2p e_2 . match EmptyEnv tauhat_2 tauhat_2prime
                 e be fresh
                 C = Set (...)
            in (tauhat, e, C)
    \end{code}

\end{frame}

%format sigma = "\Sigma"
%format kappa = "\kappa"
%format Bool  = "\ExnTyBool"
%format fail = "\mathbf{fail}"
%format SUBST = "\mathbf{Subst}"
%format Forall1 = "\forall e :: \kappa. \widehat\tau_1"
%format Forall2 = "\forall e :: \kappa. \widehat\tau_1^\prime"
%format Fun1 = "\widehat\tau_1^{e_1}\to \widehat\tau_2^{\chi_2}"
%format Fun2 = "\widehat\tau_1^{e_1}\to \widehat\tau_2^{\prime (e_0\ \overline{e_j})}"
%format MATCHRESULT = "(\overline{\lambda e_j :: \Sigma(e_j).}\ \chi_2)"

\begin{frame}{Technicalities: Matching}

    \begin{code}
        match :: Env -> Ty -> Ty -> SUBST
        match  sigma  Bool       Bool       =  Id
        match  sigma  (Forall1)  (Forall2)  =  match (sigma, MapsTo e kappa) tauhat_1 tauhat_1p
        match  sigma  (Fun1)     (Fun2)     =
            Subst e_0 MATCHRESULT . match sigma tauhat_2 tauhat_2prime
        match  sigma  _          _          =  fail
    \end{code}

\end{frame}

%format Union (s) (t) = s "\cup " t
%format Example1 = "\ExnTyBool^{e_1} \to \ExnTyBool^{(e_2\ e_1\ \cup\ e_3)}"
%format Example2 = "\ExnTyBool^{e_1} \to \ExnTyBool^{(e_0\ e_1\ e_2\ e_3)}"

\begin{frame}{Technicalities: Matching --- Example}

    \begin{itemize}
    
         \item
            \begin{code}
                match [e_1::EXN, e_2::EXN=>EXN, e_3 :: EXN]
                    (Example1) (Example2)
            \end{code}
            
        \pause
        
        \item
            \begin{code}
                Subst e_0 (LAMBDA (e_1 :: EXN) (LAMBDA (e_2 :: EXN => EXN) (LAMBDA (e_3 :: EXN) (Union (e_2 e_1) (e_3))))))
            \end{code}
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities: Constraint solving}

    \begin{itemize}
    
        \item Solving subtyping constraints can be done using a fixed-point iteration.
        
        \item To decide we have reached a fixed point we need an equality on types.
        
        \item But types are now a simply typed $\lambda$-calculus.
    
    \end{itemize}

\end{frame}

\begin{frame}{Technicalities: $\lambda^\cup$}

    \begin{description}

    \item[Types]

        \begin{align}
            \LuTy \in \ClassLuTy &&::= \quad &\LuBase                     \tag{base type} \\
                                 &&||  \quad &\LuArr{\LuTy_1}{\LuTy_2}    \tag{function type}
        \end{align}

    \item[Terms]

        \begin{align}
            \LuTm \in \ClassLuTm &&::= \quad &\LuVar, \LuVarY, ... \tag{variable} \\
                                 &&||  \quad &\LuAbs{\LuVar}{\LuTy}{\LuTm} \tag{abstraction} \\
                                 &&||  \quad &\LuApp{\LuTm_1}{\LuTm_2} \tag{application} \\
                                 &&||  \quad &\LuEmpty \tag{empty} \\
                                 &&||  \quad &\LuCon \tag{singleton} \\
                                 &&||  \quad &\LuUnion{\LuTm_1}{\LuTm_2} \tag{union}
        \end{align}

    \item[Values]

        Values $\LuVal$ are terms of the form \[ _{\LuAbs{\LuVar_1}{\LuTy_1}{\cdots\LuAbs{\LuVar_i}{\LuTy_i}{\LuUnion{\LuCon[\LuCON_1]}{(
    \LuUnion{\cdots}{(\LuUnion{\LuCon[\LuCON_j]}{(\LuUnion{\LuApp{\LuVar_1}{\LuVal_{11}\cdots\LuVal_{1m}}}{(\LuUnion{\cdots}{\LuApp{x_k}{v_{k1} \cdots v_{kn}}})})})})}}}} \]

    \end{description}

\end{frame}

\begin{frame}{Technicalities: $\lambda^\cup$}

\begin{figure}\scriptsize
\begin{align}
    {\LuApp{\left(\LuAbs{\LuVar}{\LuTy}{\LuTm_1}\right)}{\LuTm_2}} &\REDUCE {\Subst{\LuTm_2}{\LuVar}{\LuTm_1}} \tag{$\beta$-reduction} \\
    \begin{split}
    {\LuApp{\left(\LuUnion{\LuTm_1}{\LuTm_2}\right)}{\LuTm_3}} &\REDUCE {\LuUnion{\LuApp{\LuTm_1}{\LuTm_3}}{\LuApp{\LuTm_2}{\LuTm_3}}} \\
    {\LuUnion{\left(\LuAbs{\LuVar}{\LuTy}{\LuTm_1}\right)}{\left(\LuAbs{\LuVar}{\LuTy}{\LuTm_2}\right)}}
        &\REDUCE {\LuAbs{\LuVar}{\LuTy}{\left(\LuUnion{\LuTm_1}{\LuTm_2}\right)}} \\
    {\LuUnion{\LuAPPLIED}{\LuAPPLIED[']}}
        &\REDUCE {\LuVar\ \left(\LuUnion{\LuTm_1}{\LuTm_1'}\right) \cdots \left(\LuUnion{\LuTm_n}{\LuTm_n'}\right)}
    \end{split} \tag{congruences} \\
    {\LuUnion{\left(\LuUnion{\LuTm_1}{\LuTm_2}\right)}{\LuTm_3}}
        &\REDUCE {\LuUnion{\LuTm_1}{\left(\LuUnion{\LuTm_2}{\LuTm_3}\right)}} \tag{associativity} \\
    \begin{split}
    {\LuUnion{\LuEmpty}{\LuTm}} &\REDUCE {\LuTm} \\
    {\LuUnion{\LuTm}{\LuEmpty}} &\REDUCE {\LuTm}
    \end{split} \tag{unit} \\
    \begin{split}
    {\LuUnion{\LuVar}{\LuVar}} &\REDUCE {\LuVar} \\
    {\LuUnion{\LuVar}{\left(\LuUnion{\LuVar}{\LuTm}}\right)} &\REDUCE {\LuUnion{\LuVar}{\LuTm}} \\
    {\LuUnion{\LuCon}{\LuCon}} &\REDUCE {\LuCon} \\
    {\LuUnion{\LuCon}{\left(\LuUnion{\LuCon}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuCon}{\LuTm}}
    \end{split} \tag{idempotence} \\
    %\begin{split}
    {\LuUnion{\LuAPPLIED}{\LuCon}} &\REDUCE {\LuUnion{\LuCon}{\LuAPPLIED}} \\
    {\LuUnion{\LuAPPLIED}{\left(\LuUnion{\LuCon}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuCon}{\left(\LuUnion{\LuAPPLIED}{\LuTm}\right)}} \\
    {\LuUnion{\LuAPPLIED}{\LuAPPLIED[']}} &\REDUCE {\LuUnion{\LuAPPLIED[']}{\LuAPPLIED}} &&\text{if $\LuOrder{\LuVar'}{\LuVar}$}\quad\quad\quad\quad \\
    {\LuUnion{\LuAPPLIED}{\left(\LuUnion{\LuAPPLIED[']}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuAPPLIED[']}{\left(\LuUnion{\LuAPPLIED}{\LuTm}\right)}} &&\text{if $\LuOrder{\LuVar'}{\LuVar}$} \\
    {\LuUnion{\LuCon}{\LuCon[\LuCON']}} &\REDUCE {\LuUnion{\LuCon[\LuCON']}{\LuCon}} &&\text{if $\LuOrder{\LuCON'}{\LuCON}$} \\
    {\LuUnion{\LuCon}{\left(\LuUnion{\LuCon[\LuCON']}{\LuTm}\right)}} &\REDUCE {\LuUnion{\LuCon[\LuCON']}{\left(\LuUnion{\LuCon}{\LuTm}\right)}} &&\text{if $\LuOrder{\LuCON'}{\LuCON}$}
    %\end{split} \tag{commutativity}
\end{align}
\end{figure}

\end{frame}


\begin{frame}{Technicalities: $\lambda^\cup$}

\begin{conjecture}
    The reduction relation $\Reduce{}{}$ preserves meaning.
\end{conjecture}

\begin{conjecture}
    The reduction relation $\Reduce{}{}$ is strongly normalizing.
\end{conjecture}

\begin{conjecture}
    The reduction relation $\Reduce{}{}$ is locally confluent.
\end{conjecture}

\begin{corollary}
    The reduction relation $\Reduce{}{}$ is confluent.
\end{corollary}
%\begin{proof}
%    Follows from SN, LC and Newman's Lemma.
%\end{proof}

\begin{corollary}
    The $\LambdaUnion$-calculus has unique normal forms.
\end{corollary}

\begin{corollary}
    Equality of $\LambdaUnion$-terms can be decided by normalization.
\end{corollary}

\end{frame}
