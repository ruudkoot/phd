\section{Motivation}

\begin{frame}{Motivation}

    \begin{itemize}
    
        \item Types should not lie; we would like to have \emph{checked exceptions} in Haskell:

            \begin{code}
                map :: (alpha -> beta) -> [alpha] -> [beta] throws e
            \end{code}
            
        \item What should be the correct value of |e|?
    
    \end{itemize}

\end{frame}

\begin{frame}{Motivation}

    Assigning accurate exception types is complicated by:
        
    \begin{description}
    
        \item[Higher-order functions] Exceptions raised by higher-order functions depend on the exceptions raised by functional arguments.

            \begin{code}
                map :: (alpha -> beta throws e_1) -> [alpha] -> [beta] throws (e_1 # e_2)
            \end{code}

        \item[Non-strict evaluation] Exceptions are embedded inside values.
        
            \begin{code}
                map :: (alpha throws e_1 -> beta) throws e_2
                    -> [alpha throws e_3] throws e_4 -> [beta throws e_5] throws e_6
            \end{code}
        
    \end{description}

\end{frame}

\begin{frame}{Motivation}

    \begin{itemize}
    
        \item Instead of |tau throws e|, write |Throws tau e| for a type |tau| that can evaluate to |bottom_chi| for some $\chi \in e$.
        
        \item The fully annotated exception type for |map| would be:
        
            \alt<-2>{
                \begin{code}
                    map  ::  Throws ((Throws alpha e_1 -> Throws beta ((e_1 # e_2)))) e_3 -> Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws beta ((e_1 # e_2 # e_3))]) e_4
                    map  =   LAMBDA f (LAMBDA xs (case xs of
                                               []      -|> []
                                               (y:ys)  -|> f y : map f ys))
                \end{code}
            }{
                \begin{code}
                    map  ::  (ThrowsArr (Throws alpha e_1) (Throws beta ((e_1 # e_2))) (e_3)) -> Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws beta ((e_1 # e_2 # e_3))]) e_4
                    map  =   LAMBDA f (LAMBDA xs (case xs of
                                               []      -|> []
                                               (y:ys)  -|> f y : map f ys))
                \end{code}
            }

        \pause

        \item If you want to be pedantic:
        
            \alt<-2>{
                \begin{code}
                    map  ::  forall alpha beta e_1 e_2 e_3 e_4.
                        Throws ((Throws ((Throws alpha e_1 -> Throws beta ((e_1 # e_2)))) e_3 -> Throws ((Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws beta ((e_1 # e_2 # e_3))]) e_4)) noexn)) noexn
                \end{code}
            }{
                \begin{code}
                    map  ::  forall alpha beta e_1 e_2 e_3 e_4.
                        ThrowsArr ((ThrowsArr (Throws alpha e_1) (Throws beta (e_1 # e_2)) e_3))) (ThrowsArr (Throws ([Throws alpha e_1]) e_4) (Throws ([Throws beta ((e_1 # e_2 # e_3))]) e_4) noexn) noexn
                \end{code}
            }

    \end{itemize}
    \pause
\end{frame}

\begin{frame}{Motivation}

    \begin{itemize}
    
        \item The exception type
        
            \begin{code}
                map  ::  (ThrowsArr (Throws alpha e_1) (Throws beta ((e_1 # e_2))) (e_3)) -> Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws beta ((e_1 # e_2 # e_3))]) e_4
            \end{code}
            
            is not as accurate as we would like.
            
        \item Consider the instantiations:
        
            \begin{code}
            
                map id                :: Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws alpha (e_1)]) e_4
                
                map (const bottom_E)  :: Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws beta ((e_1 # e_E))]) e_4
            
            \end{code}
            
        \item A more appropriate type for |map (const bottom_E)| would be
        
            \begin{code}
                map (const bottom_E)  :: Throws ([Throws alpha e_1]) e_4 -> Throws ([Throws beta (e_E)]) e_4
            \end{code}
            
            as it cannot propagate exceptional elements inside the input list to the output list.
    
    \end{itemize}

\end{frame}

\begin{frame}{Motivation}

    \begin{itemize}
    
        \item The problem is that we have already committed the first argument of |map| to be of type
            
            \begin{code}
                ThrowsArr (Throws alpha e_1) (Throws beta ((e_1 # e_2))) (e_3),
            \end{code}
            
            i.e. it propagates exceptional values from the its input to the output while possibly adding additional exceptional values.
        
        \item This is a worst-case scenario: it is sound but inaccurate.
    
    \end{itemize}

\end{frame}

\begin{frame}{Motivation}

    \begin{itemize}
    
        \item The solution is to move from Hindley--Milner to $F_\omega$, introducing \emph{higher-ranked types} and \emph{type operators}.
        
            \begin{itemize}
            
                \item Recall that System~$F_\omega$ replicates the \emph{simply typed $\lambda$-calculus} on the type level.
            
            \end{itemize}
        
        \item This gives us the expressiveness to state the exception type of |map| as:
        
            \begin{code}
                forall e_2 e_3. (forall e_1. ThrowsArr (Throws alpha e_1) (Throws beta ((e_2 e_1))) (e_3))
                    -> (forall e_4 e_5. Throws ([Throws alpha e_4]) e_5 -> Throws ([Throws beta ((e_2 e_4 # e_3))]) e_5)
            \end{code}
    
        \item Note that $e_2$ is an \emph{exception operator} of kind |EXN -> EXN|.
    
    \end{itemize}
    
\end{frame}

\begin{frame}{Motivation}

    \begin{itemize}
    
        \item Given the following functions:
        
            \begin{code}
                map             :: forall e_2 e_3. (forall e_1. ThrowsArr (Throws alpha e_1) (Throws beta ((e_2 e_1))) (e_3))
                                       -> (forall e_4 e_5. Throws ([Throws alpha e_4]) e_5 -> Throws ([Throws beta ((e_2 e_4 # e_3))]) e_5)
                id              :: forall e. ThrowsArr (Throws alpha e) (Throws alpha e) noexn
                const bottom_E  :: forall e. ThrowsArr (Throws alpha e) (Throws beta e_E) noexn
            \end{code}
            
        \item Applying |id| or |const bottom_E| to |map| will give rise the the instantiations |e_2 -\> LAMBDA e e|, respectively |e_2 -\> LAMBDA e e_E|.
        
        \item This gives us the exception types:
        
            \begin{code}
                map id                :: forall e_4 e_5. Throws ([Throws alpha e_4]) e_5 -> Throws ([Throws alpha (e_4)]) e_5
                
                map (const bottom_E)  :: forall e_4 e_5. Throws ([Throws alpha e_4]) e_5 -> Throws ([Throws beta (e_E)]) e_5
            \end{code}
            
            as desired.
    
    \end{itemize}

\end{frame}
